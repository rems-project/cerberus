open import Pervasives AilSyntax Range ErrorMonad TypingError GenTypes Utils Ctype
import AilTypesAux AilTyping IntegerImpl Debug

let unatomic = function
  | GenAtomic ty ->
      inject_type ty
  | gty ->
      gty
end

(* == constructor predicates on ctypes ====================================== *)
val is_array: genType -> bool
let is_array = function
  | GenArray _ _ ->
      true
  | _ ->
      false
end

val is_function: genType -> bool
let is_function = function
  | GenFunction _ _ _ ->
      true
  | GenFunctionNoParams _ ->
      true
  | _ ->
      false
end

val is_integer: genType -> bool
let is_integer = function
  | GenBasic (GenInteger _) ->
      true
  | _ ->
      false
end

val is_floating: genType -> bool
let is_floating = function
  | GenBasic (GenFloating _) ->
      true
  | _ ->
      false
end

val is_pointer: genType -> bool
let is_pointer = function
  | GenPointer _ _ ->
      true
  | _ ->
      false
  end

val is_void: genType -> bool
let void = function
  | GenVoid ->
      true
  | _ ->
      false
end


val is_struct: genType -> bool
let is_struct ty =
  match unatomic ty with
  | GenStruct _ ->
      true
  | _ ->
      false
end

val is_union: genType -> bool
let is_union ty =
  match unatomic ty with
  | GenUnion _ ->
      true
  | _ ->
      false
end

val is_struct_or_union: genType -> bool
let is_struct_or_union ty =
  is_struct ty || is_union ty

(* == generic predicates on ctypes ========================================== *)
(* STD §6.2.5#18, sentence 1 *)
val is_arithmetic: genType -> bool
let is_arithmetic gty =
  is_integer gty || is_floating gty

(* STD §6.2.5#21, sentence 1 *)
val is_scalar: genType -> bool
let is_scalar gty =
  is_pointer gty || is_arithmetic gty

let is_real gt : bool = is_integer gt || is_floating gt

(* following (§6.3.2.1)#3 *)
let array_coercion = function
  | GenArray ty _ -> GenPointer no_qualifiers ty
  | gty           -> gty
  end

(* following (§6.3.2.1)#4 *)
let function_coercion = function
  | GenFunction ty params isVariadic ->
      GenPointer no_qualifiers (Ctype [] (Function ty params isVariadic))
  | GenFunctionNoParams _ ->
      error "GenTypesAux.function_coercion ==> GenFunctionNoParams"  
  | gty ->
      gty
  end

(* following (§6.3.2.1)#3 and #4 *)
let rvalue_coercion gty : genType =
  if is_array gty then
    array_coercion gty
  else if is_function gty then
    function_coercion gty
  else
    gty

val is_pointer_to_complete_object: forall 'a. sigma 'a -> genType -> bool
let is_pointer_to_complete_object sigm = function
  | GenPointer _ ty ->
      AilTypesAux.is_complete sigm ty
  | _ ->
      false
end

val are_pointers_to_qualifiedOrUnqualified_compatible_complete_objects: forall 'a. sigma 'a -> genType -> genType -> bool
let are_pointers_to_qualifiedOrUnqualified_compatible_complete_objects sigm gty1 gty2 =
  match (gty1, gty2) with
    | (GenPointer _ ref_ty1, GenPointer _ ref_ty2) ->
           AilTypesAux.is_complete sigm ref_ty1
        && AilTypesAux.is_complete sigm ref_ty2
        && AilTypesAux.are_compatible (no_qualifiers, ref_ty1) (no_qualifiers, ref_ty2)
    | _ ->
        false
  end

val are_pointers_to_qualifiedOrUnqualified_compatible_types: genType -> genType -> bool
let are_pointers_to_qualifiedOrUnqualified_compatible_types gty1 gty2 =
  (* NOTE: because of the "qualified or unqualified" we ignore the qualifiers of
     the referenced types *)
  match (gty1, gty2) with
    | (GenPointer _ ref_ty1, GenPointer _ ref_ty2) ->
        AilTypesAux.are_compatible (no_qualifiers, ref_ty1) (no_qualifiers, ref_ty2)
    | _ ->
        false
  end  

val is_pointer_to_object: genType -> bool
let is_pointer_to_object = function
  | GenPointer _ ref_ty ->
      AilTypesAux.is_object ref_ty
  | _ ->
      false
end

val is_pointer_to_void: genType -> bool
let is_pointer_to_void = function
  | GenPointer _ (Ctype _ Void) ->
      true
  | _ ->
      false
end

val are_pointers_to_compatible_types: genType -> genType -> bool
let are_pointers_to_compatible_types gty1 gty2 =
  match (gty1, gty2) with
    | (GenPointer ref_qs1 ref_ty1, GenPointer ref_qs2 ref_ty2) ->
        AilTypesAux.are_compatible (ref_qs1, ref_ty1) (ref_qs2, ref_ty2)
    | _ ->
        false
  end

val composite_pointer: genType -> genType -> maybe genType
let composite_pointer gty1 gty2 =
  match (gty1, gty2) with
  | (GenPointer ref_qs1 ref_ty1, GenPointer ref_qs2 ref_ty2) ->
      if AilTypesAux.are_compatible (ref_qs1, ref_ty1) (ref_qs1, ref_ty2) then
        (* thanks to the compatibility test we know ref_qs1 = ref_qs2 *)
        Maybe.map (GenPointer ref_qs1) (AilTypesAux.make_composite ref_ty1 ref_ty2)
      else
        Nothing
  | _ ->
      Nothing
  end

(* FIXME: Sound but not principal. *)
let integer_promotion git : genIntegerType =
  Promote git

(* NOTE: must be called on a integer type *)
val integer_promote: genType -> genType
let integer_promote = function
  | GenBasic (GenInteger git) ->
      GenBasic (GenInteger (Promote git))
  |  _ ->
      error "GenTypesAux.integer_promote: called on a non-integer type"
end


(* Sound but not principal. *)
let usual_arithmetic_promoted_integer git1 git2 : genIntegerType =
  Usual git1 git2

let usual_arithmetic_integer git1 git2 : genIntegerType =
  usual_arithmetic_promoted_integer
    (integer_promotion git1)
    (integer_promotion git2)

(* STD §6.2.5#12 *)
let corresponding_real_type gt =
  if is_floating gt then
    match gt with
    | GenBasic (GenFloating (RealFloating rfty)) ->
        Just rfty
    | _ ->
        error "GenTypesAux.corresponding_real_type"
    end
  else
    Nothing

(* NOTE: must only be called on arithmetic types *)
val usual_arithmetic: genType -> genType -> genType
let usual_arithmetic gty1 gty2 =
  (* STD §6.3.1.8#1, bullet 4 *)
  match (gty1, gty2) with
    | (GenBasic (GenInteger gity1), GenBasic (GenInteger gity2)) ->
        GenBasic (GenInteger (usual_arithmetic_integer gity1 gity2))
    | _ ->
        match (corresponding_real_type gty1, corresponding_real_type gty2) with
          (* STD §6.3.1.8#1, bullet 1 *)
          | (Just LongDouble, _) ->
              GenBasic (GenFloating (RealFloating LongDouble))
          | (_, Just LongDouble) ->
              GenBasic (GenFloating (RealFloating LongDouble))
          (* STD §6.3.1.8#1, bullet 2 *)
          | (Just Double, _) ->
              GenBasic (GenFloating (RealFloating Double))
          | (_, Just Double) ->
              GenBasic (GenFloating (RealFloating Double))
          (* STD §6.3.1.8#1, bullet 3 *)
          | (Just Float, _) ->
              GenBasic (GenFloating (RealFloating Float))
          | (_, Just Float) ->
              GenBasic (GenFloating (RealFloating Float))
          | _ ->
              error "GenTypesAux.usual_arithmetic must only be called on arithmetic types"
        end
  end

let rec interpret_genIntegerType loc impl git : errorM integerType =
  match git with
  | Concrete ity ->
      return ity
  | SizeT ->
      return Size_t
  | PtrdiffT ->
      return Ptrdiff_t
  | PtraddrT ->
      return Ptraddr_t
  | Unknown ic ->
      AilTyping.type_of_constant loc impl ic
  | Promote git ->
      interpret_genIntegerType loc impl git >>= fun ity ->
      return (AilTypesAux.integer_promotion impl ity)
  | Usual git1 git2 ->
      interpret_genIntegerType loc impl git1 >>= fun ity1 ->
      interpret_genIntegerType loc impl git2 >>= fun ity2 ->
      return (AilTypesAux.usual_arithmetic_integer impl ity1 ity2)
  end

val interpret_genBasicType: Loc.t -> IntegerImpl.implementation -> genBasicType -> errorM basicType
let interpret_genBasicType loc impl = function
  | GenInteger gity ->
      interpret_genIntegerType loc impl gity >>= fun ity ->
      return (Integer ity)
  | GenFloating fty ->
      return (Floating fty)
end

val interpret_genType: Loc.t -> IntegerImpl.implementation -> genType -> errorM ctype
let interpret_genType loc impl gty =
  let ret ty = return (Ctype [Annot.Aloc loc] ty) in
  match gty with
    | GenVoid ->
        ret Void
    | GenBasic gbty ->
        interpret_genBasicType loc impl gbty >>= fun bty ->
        ret (Basic bty)
    | GenArray ty n ->
        ret (Array ty n)
    | GenFunction qs_ty params is_variadic ->
        ret (Function qs_ty params is_variadic)
    | GenFunctionNoParams qs_ty ->
        ret (FunctionNoParams qs_ty)
    | GenPointer qs ty ->
        ret (Pointer qs ty)
    | GenStruct tag ->
        ret (Struct tag)
    | GenUnion tag ->
        ret (Union tag)
    | GenAtomic ty ->
        ret (Atomic ty)
  end

val interpret_genTypeCategory: Loc.t -> IntegerImpl.implementation -> genTypeCategory -> errorM typeCategory
let interpret_genTypeCategory loc impl = function
  | GenRValueType gty ->
      RValueType <$> interpret_genType loc impl gty
  | GenLValueType qs ty isRegister ->
      return (LValueType qs ty isRegister)
end

val signed_integerSuffix: integerSuffix -> bool
let signed_integerSuffix = function
  |  L  -> true
  |  LL -> true
  | U   -> false
  | UL  -> false
  | ULL -> false
end

val min_interpret_integerSuffix: integerSuffix -> integerBaseType
let min_interpret_integerSuffix = function
  | L   -> Long
  | LL  -> LongLong
  | U   -> Int_
  | UL  -> Long
  | ULL -> LongLong
end

val min_interpret_optionIntegerSuffix: maybe integerSuffix -> integerBaseType
let min_interpret_optionIntegerSuffix = function
  | Nothing ->
      Int_
  | Just suff ->
      min_interpret_integerSuffix suff
end

(* STD §6.2.5#1, sentence 4 *)
val is_complete: forall 'a. sigma 'a -> genType -> bool
let is_complete sigm gty =
  match unatomic gty with
    | GenVoid ->
        (* STD §6.2.5#19 *)
        false
    | GenBasic _ ->
        (* STD §6.2.5#14, sentence 2 *)
        true
    | GenArray _ n_opt ->
        (* STD §6.2.5#22, sentence 1-2 *)
        (* STD §6.7.6.2#4, sentence 1 *)
        (* NOTE: this function is only called after desugaring,
            so we don't need to check the element type *)
        isJust n_opt
      (* the notion of complete/incomplete types only applies to object types *)
    | GenFunction _ _ _ ->
        error "GenTypesAux.is_complete: called an a function type"
    | GenFunctionNoParams _ ->
        error "GenTypesAux.is_complete: called an a function type (no params)"
    | GenPointer _ _ ->
        true
    | GenAtomic _ ->
        (* NOTE: this function is only called after desugaring,
            so we don't need to check the inner type *)
        true
      (* STD §6.2.5#22, sentence 3-4 *)
    | GenStruct sym ->
        match List.lookup sym sigm.tag_definitions with
          | Just (_, StructDef _ _) ->
              (* TODO[note]: as far as I can tell, a struct with a flexible array member
                              is still a complete type *)
              true
          | _ ->
              let _ = Debug.print_debug 5 [Debug.DB_ail_typing]
                  (fun () -> "GenTypesAux.is_complete failed on struct tag: " ^ show sym ^ " with env: " ^ show sigm.tag_definitions) in
              false
        end
      (* STD §6.2.5#22, sentence 3-4 *)
    | GenUnion sym ->
        match List.lookup sym sigm.tag_definitions with
          | Just (_, UnionDef _) ->
              true
          | _ ->
              false
        end
end

val is_incomplete: forall 'a. sigma 'a -> genType -> bool
let is_incomplete sigm gty =
  not (is_complete sigm gty)

val annotations: forall 'a. expression 'a -> (list string * 'a)
let annotations (AnnotatedExpression gtc annots _ _) = (annots, gtc)

val genTypeCategoryOf: expression genTypeCategory -> genTypeCategory
let genTypeCategoryOf (AnnotatedExpression gtc _ _ _) =
  gtc
