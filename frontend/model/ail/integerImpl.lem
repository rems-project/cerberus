open import Pervasives Utils Range Ctype

type binaryMode =
  | Two'sComplement
  | One'sComplement
  | SignPlusMagnitude

(* From 6.3.1.1
  — The rank of a signed integer type shall be greater than the rank of any
  signed integer type with less precision.
  — The rank of long long int shall be greater than the rank of long int, which
  shall be greater than the rank of int, which shall be greater than the rank
  of short int, which shall be greater than the rank of signed char.

  Suppose precision P (long long int) < precision P (long int).
  Then ltRank P (long long int) (long int).
  But the second bullet tells us that ltRank P (long int) (long long int).
  So P (long int) ≤ precision P (long long int).
*)

val min_precision: integerBaseType -> nat
let min_precision = function
  | Ichar    -> 8
  | Short    -> 16
  | Int_     -> 16
  | Long     -> 32
  | LongLong -> 64
  (* TODO: check the following *)
  | IntN_t n       -> n
  | Int_leastN_t n -> n
  | Int_fastN_t n  -> n
  | Intmax_t       -> 64 (* TODO: hack *)
  | Intptr_t       -> 64 (* TODO: hack *)
end

type implementation = <|
  impl_binary_mode: binaryMode;
  impl_signed:      integerType -> bool;
  impl_precision:   integerType -> nat;
  impl_size_t:      integerType;
  impl_ptrdiff_t:   integerType;
  impl_ptraddr_t  :   integerType;
|>

val make_implementation: binaryMode -> (integerType -> bool) -> (integerType -> nat)
                         -> integerType -> integerType -> integerType -> implementation
let make_implementation binary_mode signed precision size_ity ptrdiff_ity ptraddr_ity = <|
  impl_binary_mode= binary_mode;
  impl_signed=      signed;
  impl_precision=   precision;
  impl_size_t=      size_ity;
  impl_ptrdiff_t=   ptrdiff_ity;
  impl_ptraddr_t=     ptraddr_ity;
|>

val integer_range: implementation -> integerType -> range
let integer_range P ity =
  let prec = P.impl_precision ity in
  if P.impl_signed ity then
    match P.impl_binary_mode with
    | Two'sComplement   -> make_range (~(2 ** prec))
                                      ((2 ** prec) - 1)
    | One'sComplement   -> make_range (~((2 ** prec)) + 1)
                                      ((2 ** prec) - 1)
    | SignPlusMagnitude -> make_range (~((2 ** prec)) + 1)
                                      ((2 ** prec) - 1)
    end
  else
    make_range 0 ((2 ** prec) - 1)

val min_range_unsigned: integerBaseType -> range
let min_range_unsigned ibty =
  let prec = min_precision ibty in
  make_range 0 ((2 ** prec) - 1)

val min_range_signed: integerBaseType -> range
let min_range_signed ibty =
  let prec = (min_precision ibty) (* - 1 *) in
  make_range ((~(2 ** (prec - 1))) + 1)
             ((2 ** (prec - 1)) - 1)

val min_integer_range: integerType -> range
let min_integer_range = function
  | Char          -> make_range 0 ((2 ** ((min_precision Ichar)- 1)) - 1)
  | Bool          -> make_range 0 1
  | Unsigned ibty -> min_range_unsigned ibty
  | Signed   ibty -> min_range_signed   ibty
  (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
  | Enum _ -> min_range_signed Int_
  | Size_t -> error "TODO: min_integer_range, Size_t"
  | Wchar_t -> error "TODO: min_integer_range, Wchar_t"
  | Wint_t -> error "TODO: min_integer_range, Wint_t"
  | Ptrdiff_t -> error "TODO: min_integer_range, Ptrdiff_t"
  | Ptraddr_t -> error "TODO: min_integer_range, Ptraddr_t"
end

val min_implementation_signed_char: implementation
let min_implementation_signed_char =
  make_implementation
    SignPlusMagnitude
    ( function
        | Char       -> true
        | Signed   _ -> true
        | Bool       -> false
        | Unsigned _ -> false
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> true
        | Size_t -> error "TODO: min_implementation_signed_char, Size_t 1"
        | Wchar_t -> error "TODO: min_implementation_signed_char, Wchar_t 1"
        | Wint_t -> error "TODO: min_implementation_signed_char, Wint_t 1"
        | Ptrdiff_t -> error "TODO: min_implementation_signed_char, Ptrdiff_t 1"
        | Ptraddr_t -> error "TODO: min_implementation_signed_char, Ptraddr_t 1"
      end
    )
    ( function
        | Char              -> 7
        | Bool              -> 1
        | Signed   Ichar    -> 7
        | Unsigned Ichar    -> 8
        | Signed   Short    -> 15
        | Unsigned Short    -> 16
        | Signed   Int_     -> 15
        | Unsigned Int_     -> 16
        | Signed   Long     -> 31
        | Unsigned Long     -> 32
        | Signed   LongLong -> 63
        | Unsigned LongLong -> 64
        | Signed (IntN_t n) -> n-1
        | Unsigned (IntN_t n) -> n
        | Signed (Int_leastN_t _)   ->
            error "TODO: min_implementation_signed_char, Signed Int_leastN_t"
        | Unsigned (Int_leastN_t _) ->
            error "TODO: min_implementation_signed_char, Unsigned Int_leastN_t"
        | Signed (Int_fastN_t n)    ->
            error "TODO: min_implementation_signed_char, Signed Int_fastN_t"
        | Unsigned (Int_fastN_t n)  ->
            error "TODO: min_implementation_signed_char, Unsigned Int_fastN_t"
        | Signed Intmax_t           ->
            error "TODO: min_implementation_signed_char, Signed Intmax_t"
        | Unsigned Intmax_t         ->
            error "TODO: min_implementation_signed_char, Signed Intmax_t"
        | Signed Intptr_t           ->
            error "TODO: min_implementation_signed_char, Unsigned Intptr_t"
        | Unsigned Intptr_t         ->
            error "TODO: min_implementation_signed_char, Unsigned Intptr_t"
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> 15
        | Size_t -> error "TODO: min_implementation_signed_char, Size_t 2"
        | Wchar_t -> error "TODO: min_implementation_signed_char, Wchar_t 2"
        | Wint_t -> error "TODO: min_implementation_signed_char, Wint_t 2"
        | Ptrdiff_t -> error "TODO: min_implementation_signed_char, Ptrdiff_t 2"
        | Ptraddr_t -> error "TODO: min_implementation_signed_char, Ptraddr_t 2"
      end
    )
    (Unsigned Long)
    (Signed   Long)
    (Unsigned Long)

val min_implementation_unsigned_char: implementation
let min_implementation_unsigned_char =
  make_implementation
    SignPlusMagnitude
    ( function
        | Signed   _ -> true
        | Char       -> false
  | Bool       -> false
  | Unsigned _ -> false
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> true
        | Size_t -> error "TODO: min_implementation_unsigned_char, Size_t 1"
        | Wchar_t -> error "TODO: min_implementation_unsigned_char, Wchar_t 1"
        | Wint_t -> error "TODO: min_implementation_unsigned_char, Wint_t 1"
        | Ptrdiff_t -> error "TODO: min_implementation_unsigned_char, Ptrdiff_t 1"
        | Ptraddr_t -> error "TODO: min_implementation_unsigned_char, Ptraddr_t 1"
      end
    )
    ( function
        | Char              -> 8
        | Bool              -> 1
        | Signed   Ichar    -> 7
        | Unsigned Ichar    -> 8
        | Signed   Short    -> 15
        | Unsigned Short    -> 16
        | Signed   Int_     -> 15
        | Unsigned Int_     -> 16
        | Signed   Long     -> 31
        | Unsigned Long     -> 32
        | Signed   LongLong -> 63
        | Unsigned LongLong -> 64
        | Signed (IntN_t n) -> n-1
        | Unsigned (IntN_t n) -> n
        | Signed (Int_leastN_t _)   ->
            error "TODO: min_implementation_unsigned_char, Signed Int_leastN_t"
        | Unsigned (Int_leastN_t _) ->
            error "TODO: min_implementation_unsigned_char, Unsigned Int_leastN_t"
        | Signed (Int_fastN_t n)    ->
            error "TODO: min_implementation_unsigned_char, Signed Int_fastN_t"
        | Unsigned (Int_fastN_t n)  ->
            error "TODO: min_implementation_unsigned_char, Unsigned Int_fastN_t"
        | Signed Intmax_t           ->
            error "TODO: min_implementation_unsigned_char, Signed Intmax_t"
        | Unsigned Intmax_t         ->
            error "TODO: min_implementation_unsigned_char, Signed Intmax_t"
        | Signed Intptr_t           ->
            error "TODO: min_implementation_unsigned_char, Unsigned Intptr_t"
        | Unsigned Intptr_t         ->
            error "TODO: min_implementation_unsigned_char, Unsigned Intptr_t"
        (* TODO: making an implementation choice here (see §6.7.2.3#4) *)
        | Enum _ -> 15
        | Size_t -> error "TODO: min_implementation_unsigned_char, Size_t 2"
        | Wchar_t -> error "TODO: min_implementation_unsigned_char, Wchar_t 2"
        | Wint_t -> error "TODO: min_implementation_unsigned_char, Wint_t 2"
        | Ptrdiff_t -> error "TODO: min_implementation_unsigned_char, Ptrdiff_t 2"
        | Ptraddr_t -> error "TODO: min_implementation_unsigned_char, Ptraddr_t 2"
      end
    )
    (Unsigned Long)
    (Signed   Long)
    (Unsigned Long)
