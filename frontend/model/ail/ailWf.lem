open import Pervasives AilSyntax AilTypesAux Ctype TypingError ErrorMonad
import Undefined

(* test whether a ctype has been "adjusted" as described in STD ยง6.7.6.3#7 and #8
   NOTE: this function obviously doesn't see whether the adjusting was PROPERLY
         done. *)
val is_adjusted: ctype -> bool
let is_adjusted ty =
  not (is_array ty) && not (is_function ty)


val stringFromCtype: ctype -> string
declare ocaml target_rep function stringFromCtype = `String_ail.string_of_ctype_raw`
declare hol   target_rep function stringFromCtype = `pp_core$pp_core_ctype`

val stringFromQualifiers: qualifiers -> string
declare ocaml target_rep function stringFromQualifiers = `String_ail.string_of_qualifiers_human`
declare hol   target_rep function stringFromQualifiers = `pp_ail$pp_qualifiers`


val wf_lvalue_aux: qualifiers -> ctype -> errorM unit
let wf_lvalue_aux qs ty =
  match proj_ctype_ ty with
    | Pointer _ ref_ty ->
        guard (Loc.locOf ref_ty) (TError_ConstraintViolation (Constraint.RestrictQualifiedPointedTypeConstraint ref_ty)) (
          not (is_object ref_ty) --> not (qs.restrict)
        )
    | _ ->
        guard (Loc.locOf ty) (TError_ConstraintViolation Constraint.RestrictQualifiedTypeConstraint) (
          not (qs.restrict)
        ) >>
        guard (Loc.locOf ty) (TError_UndefinedBehaviour Undefined.UB066_qualified_function_specification) (
          is_function ty --> is_unqualified qs
        )
  end

val     wf_parameters_aux: forall 'a. sigma 'a -> (ctype -> errorM unit) -> list (qualifiers * ctype * bool) -> errorM unit
let rec wf_parameters_aux sigm wf_type params =
  match params with
    | [] ->
        return ()
    | [(qs, (Ctype _ Void as ty), _)] ->
        (* TODO: not sure if the STD actually requires this. *)
        (* see comment in Cabs_to_ail.desugar_direct_declarator, DDecl_function *)
        guard (Loc.locOf ty) (TError_UndefinedBehaviour Undefined.UB078_modified_void_parameter) (is_unqualified qs)
    | (qs, ty, _) :: params' ->
        guard (Loc.locOf ty) (TError_MiscError ParameterTypeNotAdjusted) (
          is_adjusted ty
        ) >>
        (* STD ยง6.7.6.3#4 *)
        guard (Loc.locOf ty) (TError_ConstraintViolation Constraint.IncompleteParameterTypeFunctionDeclarator) (
          not (is_incomplete sigm ty)
        ) >>
        wf_type ty >>
        wf_lvalue_aux qs ty >>
        wf_parameters_aux sigm wf_type params'
  end


(* TODO: check *)
val     wf_type: forall 'a. sigma 'a -> ctype -> errorM unit
let rec wf_type sigm (Ctype _ ty) =
  let wf_type ty = wf_type sigm ty in
  let wf_parameters = wf_parameters_aux sigm wf_type in
  match ty with
  | Void ->
      return ()
  | Basic _ ->
      return ()
  | Array elem_ty _ ->
      guard (Loc.locOf elem_ty) (TError_ConstraintViolation Constraint.ArrayDeclarationFunctionType) (
        not (is_function elem_ty)
      ) >>
      guard (Loc.locOf elem_ty) (TError_ConstraintViolation Constraint.ArrayDeclarationIncompleteType) (
        is_complete sigm elem_ty
      ) >>
      guard (Loc.locOf elem_ty) (TError_ConstraintViolation Constraint.StructMemberFlexibleArrayInArray) (
        not (has_flexible_array_member sigm elem_ty)
      ) >>
      wf_type elem_ty
  | Function (ret_qs, ret_ty) params _ ->
      guard (Loc.locOf ret_ty) (TError_ConstraintViolation Constraint.IllegalReturnTypeFunctionDeclarator) (
        not (is_array ret_ty || is_function ret_ty)
      ) >>
      wf_type ret_ty >>
      (* TODO *)
      let () = Debug.warn [] (fun () ->
        "(unsure) wf_type, Function calls ==> wf_lvalue_aux"
      ) in
      wf_lvalue_aux ret_qs ret_ty >>
      wf_parameters params
  | FunctionNoParams (ret_qs, ret_ty) ->
      guard (Loc.locOf ret_ty) (TError_ConstraintViolation Constraint.IllegalReturnTypeFunctionDeclarator) (
        not (is_array ret_ty || is_function ret_ty)
      ) >>
      wf_type ret_ty >>
      (* TODO *)
      let () = Debug.warn [] (fun () ->
        "(unsure) wf_type, FunctionNoParams calls ==> wf_lvalue_aux"
      ) in
      wf_lvalue_aux ret_qs ret_ty
  | Pointer ref_qs ref_ty ->
      wf_type ref_ty >>
      wf_lvalue_aux ref_qs ref_ty
  | Atomic ty' ->
      guard (Loc.locOf ty') (TError_ConstraintViolation Constraint.AtomicTypeConstraint) (
        (* NOTE: the check that ty' is not qualified has to be done during the
           desugaring (see Cabs_to_ail.desugar_type_specifiers). *)
        not (is_array ty' || is_function ty' || is_atomic ty')
      ) >>
      wf_type ty'
  (* TODO: maybe check that the tags are in Sigma *)
  | Struct _ ->
      return ()
  | Union _ ->
      return ()
  | Byte ->
      return ()
(*
  | Builtin _ ->
      return () *)
  end


val wf_lvalue: forall 'a. sigma 'a -> qualifiers -> ctype -> errorM unit
let wf_lvalue S qs ty =
  wf_type S ty >>
  wf_lvalue_aux qs ty


let wf_parameters sigm =
  wf_parameters_aux sigm (wf_type sigm)
