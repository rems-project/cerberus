(* Cabs to Ail desugaring auxiliary functions (included in Cabs_to_ail_effect) *)
open import Pervasives
import Symbol Loc Ctype State_exception Errors Map_extra Maybe String_extra

open import Cn


type cn_desugaring_state = <|
  (* cn_oargs: map Symbol.sym (map Symbol.identifier (Symbol.sym * Cn.base_type Ctype.ctype)); *)
  cn_idents: map (cn_namespace * Symbol.identifier) Symbol.sym;
  cn_scopes: list (map (cn_namespace * Symbol.identifier) Symbol.sym);
  cn_predicates: list (Symbol.identifier * (Symbol.sym * cn_predicate Symbol.sym Ctype.ctype));
  cn_datatypes: list (Symbol.identifier * (cn_datatype Symbol.sym));
  cn_functions: list (Symbol.identifier * (Symbol.sym * cn_function Symbol.sym Ctype.ctype));
  cn_lemmata: list (Symbol.identifier * (Symbol.sym * cn_lemma Symbol.sym Ctype.ctype));
  cn_fun_specs: list (nat * cn_fun_spec Symbol.sym Ctype.ctype);
  cn_type_synonyms: map Symbol.identifier (cn_base_type Symbol.sym);
|>

type init_scope = <|
  functions: list (string * Symbol.sym * maybe Loc.t);
  predicates: list (string * Symbol.sym * maybe Loc.t);
  idents: list (string * Symbol.sym * maybe Loc.t);
|>

let empty_init = <|
  functions = [];
  predicates = [];
  idents = [];
|>

let initial_cn_desugaring_state cn_desugaring_init =
  let add (type_, names) acc =
    List.foldl (fun acc (str, sym, loc) ->
        let loc = match loc with | Just loc -> loc | Nothing -> Loc.unknown end in
        let entry = (type_, Symbol.Identifier loc str) in
        if Map.member entry acc
        then Assert_extra.failwith (str ^ " already registered as CN function name")
        else Map.insert entry sym acc
      ) acc names
  in
  let cn_idents =
    add (CN_function, cn_desugaring_init.functions)
      (add (CN_predicate, cn_desugaring_init.predicates)
        (add (CN_vars, cn_desugaring_init.idents)
          Map.empty))
  in
<|
  cn_idents= cn_idents;
  cn_scopes= [Map.empty];
  cn_predicates= [];
  cn_datatypes= [];
  cn_functions= [];
  cn_lemmata= [];
  cn_fun_specs= [];
  cn_type_synonyms= Map.empty;
  (* cn_c_identifier_env= Map.empty; *)
|>

(* let state_with_idents cn_idents = *)
(*   <| initial_cn_desugaring_state with cn_idents= cn_idents |> *)
(* let set_c_identifier_env env st = <| st with cn_c_identifier_env= env |> *)

(* type cn_desugM 'a = State_exception.stExceptM 'a cn_desugaring_state Errors.error *)

(* module Eff = State_exception *)
(* val return: forall 'a. 'a -> cn_desugM 'a *)
(* let inline return = State_exception.return *)
(* let inline (>>=) = Eff.bind *)
(* val fail: forall 'a. Loc.t -> Errors.desugar_cause -> cn_desugM 'a *)
(* let inline fail loc dcause = State_exception.fail (loc, Errors.DESUGAR dcause) *)
(* let inline foldlM = State_exception.foldlM *)



