open import Pervasives Utils AilSyntax Core
import Loc TypingError Undefined Constraint Symbol

type misc_violation =
  | UndeclaredIdentifier of string (*§6.5.1#2 *)
  | MultipleEnumDeclaration of Symbol.identifier (* §6.7.2.2#3, FOOTNOTE.127 *)
  | EnumSimpleDeclarationConstruction (* §6.7.2.3#7, FOOTNOTE.131 *)
  | ArrayDeclarationStarIllegalScope (* §6.7.6.2#4, sentence 2 *)
  | ArrayCharStringLiteral (* §6.7.9#14 *)
  | UniqueVoidParameterInFunctionDeclaration (* TODO: unknown quote *)
  | TypedefInitializer (* TODO: unknown quote *)

type desugar_cause =
  | Desugar_ConstraintViolation of Constraint.violation
  | Desugar_UndefinedBehaviour of Undefined.undefined_behaviour
  | Desugar_MiscViolation of misc_violation
  | Desugar_NotYetSupported of string
  | Desugar_NeverSupported of string
  | Desugar_agnosticFailure of string
  | Desugar_illtypedIntegerConstant
  | Desugar_CN of Cn.cn_error
  | Desugar_TODO of string (* TODO: get rid of this constructor eventually *)

type core_typing_cause =
  | UndefinedStartup of Symbol.sym (* Found no definition of the startup fun/proc *)
  | Mismatch of string (* syntax info *) * core_base_type (* expected *) * core_base_type (* found *)
  | MismatchBinaryOperator of Core.binop
  | MismatchIf of core_base_type (* then *) * core_base_type (* else *)
  | MismatchExpected of string (* syntax info *) * core_base_type (* expected *) * string (* found *)
  | MismatchFound of string (* syntax info *) * string (* expected *) * maybe core_base_type (* found *)
  | UnresolvedSymbol of name
  | FunctionOrProcedureSymbol of Symbol.sym
  | CFunctionExpected of name (* symbol *)
  | CFunctionParamsType
  | CFunctionReturnType
  | TooGeneral
  | CoreTyping_TODO of string (* TODO: get rid of this constructor eventually *)
  (* NOTE: I cannot fire these errors *)
  | HeterogenousList of core_base_type (* expected *) * core_base_type (* found *)
  | InvalidTag of Symbol.sym
  | InvalidMember of Symbol.sym * Symbol.identifier

type core_linking_cause =
  | DuplicateExternalName of Symbol.identifier
  | DuplicateMain
  | IncompatibleCallingConvention

type core_run_cause =
  | Illformed_program of string (* typing or name-scope error *)
  | Found_empty_stack of string (* TODO debug *)
  | Reached_end_of_proc
  | Unknown_impl
  | Unresolved_symbol of Loc.t * Symbol.sym (* found an unresolved symbolic name in core_eval *)

(* semicolon after a function definition and other places (is an extension it least since C++11) *)
type extra_semi_context =
  | AFTER_FUNCTION
  | INSIDE_STRUCT
  | INSIDE_UNION

type cparser_cause =
  | Cparser_invalid_symbol
  | Cparser_invalid_string_character
  | Cparser_invalid_line_number of string
  | Cparser_unexpected_eof
  | Cparser_unexpected_token of string
  | Cparser_non_standard_string_concatenation
  | Cparser_extra_semi of extra_semi_context
  | Cparser_KnR_declaration (* we don't support K&R syntax for declarations *)
  | Cparser_nested_comment
  | Cparser_unterminated_comment of string
  | Cparser_mismatched_magic_comment
  | Cparser_experimental_keyword of string 
  | Cparser_unimplemented_keyword of string 

type core_lexer_cause =
  | Core_lexer_invalid_symbol of char
  | Core_lexer_invalid_implname of string
  | Core_lexer_invalid_ubname of string
type core_parser_cause =
  | Core_lexer of core_lexer_cause
  | Core_parser_unexpected_token of string
  | Core_parser_unresolved_symbol of string
  | Core_parser_multiple_declaration of string
  | Core_parser_ctor_wrong_application of int (*expected*) * int (* found *)
  | Core_parser_wrong_decl_in_std
  | Core_parser_unknown_ctype of string
  | Core_parser_undefined_startup
  | Core_parser_internal_error of string

type driver_cause =
  | Driver_UB of list Undefined.undefined_behaviour

type cause =
  | CPP of string (* NOTE: this is an empty string when piping to stderr *)
  | CPARSER of cparser_cause
  | DESUGAR of desugar_cause
  | AIL_TYPING of TypingError.typing_error
  | CORE_PARSER of core_parser_cause
  | CORE_TYPING of core_typing_cause
  | CORE_LINKING of core_linking_cause
  | CORE_RUN of core_run_cause
  | DRIVER of driver_cause
  | UNSUPPORTED of string

type error = Loc.t * cause

instance (Show core_run_cause)
  let show = function
    | Illformed_program str ->
        "Illformed_program[" ^ str ^ "]"
    | Found_empty_stack str ->
        "Found_empty_stack[" ^ str ^ "]"
    | Reached_end_of_proc ->
        "Reached_end_of_proc"
    | Unknown_impl ->
        "Unknown_impl"
    | Unresolved_symbol _ sym ->
        "Unresolved_symbol[" ^ show sym ^ "]"
  end
end
