(* Concrete types and functions common to all memory layout models *)
open import Pervasives Utils
import Loc Symbol
import Undefined
import AilSyntax
import Ctype AilTypesAux

open import Nondeterminism

type thread_id = nat

type overlap_status =
  | Disjoint
  | ExactOverlap
  | PartialOverlap

type access_kind =
  | LoadAccess
  | StoreAccess

type access_error =
  | NullPtr
  | FunctionPtr
  | DeadPtr
  | OutOfBoundPtr
  | NoProvPtr
  | AtomicMemberof


let stringFromAccess_error = function
  | NullPtr ->
      "NullPtr"
  | FunctionPtr ->
      "FunctionPtr"
  | DeadPtr ->
      "DeadPtr"
  | OutOfBoundPtr ->
      "OutOfBoundPtr"
  | NoProvPtr ->
      "NoProvPtr"
  | AtomicMemberof ->
      "AtomicMemberof"
end

(* used for both free and realloc *)
type free_error =
  | Free_non_matching (* does not match any existing dynamic allocation *)
  | Free_dead_allocation
  | Free_out_of_bound (* the address is matching, but out of bound of the provenance *)

let stringFromFree_error = function
  | Free_non_matching ->
      "Free_non_matching"
  | Free_dead_allocation ->
      "Free_dead_allocation"
  | Free_out_of_bound ->
      "Free_out_of_bound"
end

(* memcpy and friends *)
type memcpy_error =
  | Memcpy_overlap (* memcpy regions overlap *)
  | Memcpy_non_object (* memcpy pointers are not pointing to objects *)
  | Memcpy_dead_object (* memcpy: pointer to dead objects *)
  | Memcpy_out_of_bound (* memcpy region spills outside object allocation *)

let stringFromMemcpy_error = function
  | Memcpy_overlap ->
     "Memcpy_overlap"
  | Memcpy_non_object ->
     "Memcpy_non_object"
  | Memcpy_dead_object ->
     "Memcpy_dead_object"
  | Memcpy_out_of_bound ->
     "Memcpy_out_of_bound"
end

type vip_kind =
  | VIP_null
  | VIP_empty
  | VIP_killed
  | VIP_out_of_bound
  | VIP_funptr

type vip_error =
  | VIP_free_invalid_pointer of Loc.t (* UB *)
  | VIP_relop_killed (* UB *)
  | VIP_relop_out_of_bound (* UB *)
  | VIP_relop_invalid (* UB *)
  | VIP_diffptr_out_of_bound (* UB *)
  | VIP_ptrcast_empty (* UB *)
  | VIP_intcast of vip_kind (* UB *)
  | VIP_intcast_not_in_range (* UB *)
  | VIP_array_shift of vip_kind (* UB *)
  | VIP_copy_alloc_id of vip_kind (* UB *)
  | VIP_copy_alloc_id_invalid (* UB *)


type mem_cheri_error =
  | CheriErrDecodingCap
  | CheriMerrInvalidCap
  | CheriMerrInsufficientPermissions
  | CheriBoundsErr of ((integer*integer)*integer*integer) (* bounds,address,length *)
  | CheriUndefinedTag
  | CheriZeroLength

instance (Show mem_cheri_error)
let show = function
  | CheriErrDecodingCap ->
     "CheriErrDecodingCap"
  | CheriMerrInvalidCap ->
     "CheriMerrInvalidCap"
  | CheriMerrInsufficientPermissions ->
     "CheriMerrInsufficientPermissions"
  | CheriBoundsErr _ ->
     "CheriBoundsErr" (* TODO(CHERI): print more *)
  | CheriUndefinedTag ->
     "CheriUndefinedTag"
  | CheriZeroLength ->
     "CheriZeroLength"
  end
end

type readonly_kind =
  | ReadonlyStringLiteral
  | ReadonlyTemporaryLifetime
  | ReadonlyConstQualified

type mem_error =
  | MerrOutsideLifetime of string (* mem_read_request *)
  | MerrInternal of string
  | MerrOther of string
  
  | MerrPtrdiff
  | MerrAccess of access_kind * access_error
  | MerrWriteOnReadOnly of readonly_kind
  | MerrReadUninit 
  | MerrTrapRepresentation of access_kind

  
  | MerrUndefinedFree of free_error
  | MerrUndefinedRealloc of free_error

  | MerrUndefinedMemcpy of memcpy_error

  | MerrIntFromPtr
  | MerrPtrFromInt
  
  | MerrPtrComparison
  
  | MerrArrayShift
  
  | MerrFreeNullPtr (* NOTE: this is not ISO UB, but we support reporting it with the switch forbid_nullptr_free *)
  
  | MerrWIP of string

    (* for the VIP memory model (should add a mechanism in the memory interface to expose custom errors) *)
  | MerrVIP of vip_error
  | MerrCHERI of mem_cheri_error

instance (Show mem_error)
  let show = function
    | MerrOutsideLifetime str ->
        "MerrOutsideLifetime \"" ^  str ^ "\""
    | MerrInternal str ->
        "MerrInternal \"" ^  str ^ "\""
    | MerrOther str ->
        "MerrOther \"" ^  str ^ "\""
    | MerrWIP str ->
        "Memory WIP: " ^ str
    | MerrPtrdiff ->
        "MerrPtrdiff"
    | MerrAccess LoadAccess err ->
        "MerrAccess Load " ^
        stringFromAccess_error err
    | MerrWriteOnReadOnly _ ->
        "MerrWriteOnReadOnly"
    | MerrReadUninit ->
        "MerrReadUninit"
    | MerrTrapRepresentation StoreAccess ->
        "MerrTrapRepresentation Store" 
    | MerrTrapRepresentation LoadAccess ->
        "MerrTrapRepresentation Load" 
    | MerrAccess StoreAccess err ->
        "MerrAccess Store " ^
        stringFromAccess_error err
    
    | MerrUndefinedFree err ->
        "MerrUndefinedFree " ^ stringFromFree_error err
    | MerrUndefinedRealloc err ->
        "MerrUndefinedRealloc " ^ stringFromFree_error err
    | MerrUndefinedMemcpy err ->
        "MerrUndefinedMemcpy " ^ stringFromMemcpy_error err
    | MerrIntFromPtr ->
        "MerrIntFromPtr"
    | MerrPtrFromInt ->
        "MerrPtrFromInt"
    | MerrPtrComparison ->
        "MerrPtrComparison"
    | MerrArrayShift ->
        "MerrArrayShift"
    | MerrFreeNullPtr ->
        "MerrFreeNullPtr"
    
    | MerrVIP err ->
        let show_kind = function
          | VIP_null ->
              "null"
          | VIP_empty ->
              "empty"
          | VIP_killed ->
              "killed"
          | VIP_out_of_bound ->
              "out_of_bound"
          | VIP_funptr ->
              "funptr"
        end in
        match err with
          | VIP_free_invalid_pointer loc ->
              "MerrVIP free_invalid_pointer [" ^ Loc.stringFromLocation loc ^ "]"
          | VIP_relop_killed ->
              "MerrVIP relop_killed"
          | VIP_relop_out_of_bound ->
              "MerrVIP relop_out_of_bound"
          | VIP_relop_invalid ->
              "MerrVIP relop_out_of_invalid"
          | VIP_diffptr_out_of_bound ->
              "MerrVIP diffptr_out_of_bound"
          | VIP_ptrcast_empty ->
              "MerrVIP ptrcast_empty"
          | VIP_intcast kind ->
              "MerrVIP intcast, " ^ show_kind kind
          | VIP_intcast_not_in_range ->
              "MerrVIP intcast_not_in_range"
          | VIP_array_shift kind ->
              "MerrVIP array_shift, " ^ show_kind kind
          | VIP_copy_alloc_id kind ->
              "MerrVIP copy_alloc_id, " ^ show_kind kind
          | VIP_copy_alloc_id_invalid ->
              "MerrVIP copy_alloc_id_invalid"
        end
    | MerrCHERI k ->
      "MerrCHERI " ^ show k
  end
end


let undefinedFromMem_error = function
  | MerrOutsideLifetime _ ->
      Just Undefined.UB009_outside_lifetime
  | MerrPtrdiff ->
      Just Undefined.UB048_disjoint_array_pointers_subtraction
  | MerrAccess _ NullPtr ->
      Just Undefined.UB019_lvalue_not_an_object
  | MerrAccess _ DeadPtr ->
      Just Undefined.UB010_pointer_to_dead_object
  | MerrIntFromPtr ->
      Just Undefined.UB024_out_of_range_pointer_to_integer_conversion
  | MerrPtrFromInt ->
      Just Undefined.UB_CERB001_integer_to_dead_pointer
  
  | MerrPtrComparison ->
      Just Undefined.UB053_distinct_aggregate_union_pointer_comparison
  | MerrArrayShift ->
      Just Undefined.UB046_array_pointer_outside
  | MerrFreeNullPtr ->
      Just Undefined.UB_CERB005_free_nullptr

  
  (* TODO do better *)
  | MerrAccess LoadAccess OutOfBoundPtr ->
      Just Undefined.UB_CERB002a_out_of_bound_load
  | MerrAccess StoreAccess OutOfBoundPtr ->
      Just Undefined.UB_CERB002b_out_of_bound_store
  
  | MerrAccess _ AtomicMemberof ->
      Just Undefined.UB042_access_atomic_structUnion_member
  
  | MerrUndefinedFree Free_non_matching ->
      Just Undefined.UB179a_non_matching_allocation_free
  | MerrUndefinedFree Free_dead_allocation ->
      Just Undefined.UB179b_dead_allocation_free
  | MerrUndefinedFree Free_out_of_bound ->
      Nothing (* this is not a UB but rather an internal error *)
  
  | MerrUndefinedRealloc Free_non_matching ->
      Just Undefined.UB179c_non_matching_allocation_realloc
  | MerrUndefinedRealloc Free_dead_allocation ->
      Just Undefined.UB179d_dead_allocation_realloc
  | MerrUndefinedRealloc Free_out_of_bound ->
     Nothing (* this is not a UB but rather an internal error *)

  | MerrUndefinedMemcpy Memcpy_overlap ->
     Just Undefined.UB100
  | MerrUndefinedMemcpy Memcpy_non_object ->
     Just (Undefined.UB_std_omission Undefined.UB_OMIT_memcpy_non_object)
  | MerrUndefinedMemcpy Memcpy_dead_object ->
     Just (Undefined.UB009_outside_lifetime)
  | MerrUndefinedMemcpy Memcpy_out_of_bound ->
     Just (Undefined.UB_std_omission Undefined.UB_OMIT_memcpy_out_of_bound)


  | MerrWriteOnReadOnly ReadonlyStringLiteral ->
      Just Undefined.UB033_modifying_string_literal
  | MerrWriteOnReadOnly ReadonlyConstQualified ->
      Just Undefined.UB064_modifying_const
  | MerrWriteOnReadOnly ReadonlyTemporaryLifetime ->
      Just Undefined.UB_modifying_temporary_lifetime
  | MerrReadUninit ->
      Just Undefined.UB011_use_indeterminate_automatic_object
  | MerrTrapRepresentation LoadAccess ->
      Just Undefined.UB012_lvalue_read_trap_representation
  
  | MerrCHERI err ->
     match err with
      | CheriMerrInvalidCap ->
          Just Undefined.UB_CHERI_InvalidCap
      | CheriErrDecodingCap ->
          Just Undefined.UB012_lvalue_read_trap_representation
      | CheriMerrInsufficientPermissions ->
          Just Undefined.UB_CHERI_InsufficientPermissions
      | CheriBoundsErr _ ->
        Just Undefined.UB_CHERI_BoundsViolation
      | CheriUndefinedTag ->
          Just Undefined.UB_CHERI_UndefinedTag
      | CheriZeroLength ->
          Just Undefined.UB_CHERI_ZeroLength
     end
  
  | _ ->
     Nothing
end







type integer_operator =
  | IntAdd
  | IntSub
  | IntMul
  | IntDiv
  | IntRem_t (* truncating remainder (this is % of C) *)
  | IntRem_f (* flooring remainder *)
  | IntExp

type floating_operator =
  | FloatAdd
  | FloatSub
  | FloatMul
  | FloatDiv


type derivecap_op =
  | DCunary of AilSyntax.unaryOperator
  | DCbinary of AilSyntax.binaryOperator

type pure_memop =
    (* CHERI *) (* (integer, integer) -> integer *)
  | DeriveCap of derivecap_op * bool (* is_signed *)
    (* CHERI*) (* (integer, integer) -> integer (may result in UB) *)
  | CapAssignValue
    (* CHERI *) (* integer -> integer *)
  | Ptr_tIntValue

type generic_memop 'sym =
  | PtrEq
  | PtrNe
  | PtrLt
  | PtrGt
  | PtrLe
  | PtrGe
(*  | PtrIsNull *)
  
  | Ptrdiff     (* (address, address) -> eff integer *)
  | IntFromPtr  (* (ctype, ctype, address) -> eff integer *) (* first type is that of the referenced type, second on is type of integer *)
  | PtrFromInt  (* (ctype, ctype, integer) -> eff address *) (* first type is that of integer, second on is type of reference *)
  | PtrValidForDeref (* (ctype, address) -> eff boolean *)

  | PtrWellAligned (* (ctype, address) -> eff boolean *)
  
  | PtrArrayShift (* address -> ctype -> integer -> eff address *)
  | PtrMemberShift of 'sym * Symbol.identifier (* address -> eff address *)

  | Memcpy
  | Memcmp
  | Realloc (* TODO: not sure about this *)
  | Va_start
  | Va_copy
  | Va_arg
  | Va_end
  
  (* RefinedC *)
  | Copy_alloc_id (* (integer, pointer) -> eff pointer *)

  (* CHERI *)
  | CHERI_intrinsic of string * (Ctype.ctype * list Ctype.ctype)

type memop = generic_memop Symbol.sym

instance forall 'a. Show 'a => (Show (generic_memop 'a))
  let show = function
    | PtrEq ->
        "ptreq"
    | PtrNe ->
        "ptrne"
    | PtrLt ->
        "ptrlt"
    | PtrGt ->
        "ptrgt"
    | PtrLe ->
        "ptrle"
    | PtrGe ->
        "ptrge"
    | Ptrdiff ->
        "ptrdiff"
    | IntFromPtr ->
        "intfromptr"
    | PtrFromInt ->
        "ptrfromint"
    | PtrValidForDeref ->
        "ptrvalidforderef"
    | PtrWellAligned ->
        "ptrwellaligned"
    | Memcpy ->
        "memcpy"
    | Memcmp ->
        "memcmp"
    | Realloc ->
        "realloc"
    | PtrArrayShift ->
        "ptrarrayshift"
    | PtrMemberShift tag_sym membr_ident ->
        "ptrmembershift[" ^ show tag_sym ^ ", " ^ show membr_ident ^ "]"
    | Va_start ->
        "va_start"
    | Va_copy ->
        "va_copy"
    | Va_arg ->
        "va_arg"
    | Va_end ->
        "va_end"
    | Copy_alloc_id ->
        "copy_alloc_id"
    | CHERI_intrinsic str _ ->
        "cheri_" ^ str
  end
end



let stringFromInteger_operator = function
  | IntAdd ->
      "IntAdd"
  | IntSub ->
      "IntSub"
  | IntMul ->
      "IntMul"
  | IntDiv ->
      "IntDiv"
  | IntRem_t ->
      "IntRem_t"
  | IntRem_f ->
      "IntRem_f"
  | IntExp ->
      "IntExp"
end


let stringFromFloating_operator = function
  | FloatAdd -> "FloatAdd"
  | FloatSub -> "FloatSub"
  | FloatMul -> "FloatMul"
  | FloatDiv -> "FloatDiv"
end


type mem_constraint 'a =
  | MC_empty
  | MC_eq of 'a * 'a
  | MC_le of 'a * 'a
  | MC_lt of 'a * 'a
  
  | MC_in_device of 'a
  
  | MC_or of mem_constraint 'a * mem_constraint 'a
  | MC_conj of list (mem_constraint 'a)
  | MC_not of mem_constraint 'a

instance forall 'a. (Constraints mem_constraint 'a)
  let empty = MC_empty
  let negate cs = MC_not cs
  let concat cs1 cs2 = MC_conj [cs1; cs2]
end

type type_predicate =
  | TyPred of (Ctype.ctype -> bool)
  | TyIsPointer

(* This type describes an element of function specification.
   It is used for both arguments and return values.
   Please note, that it allows circular dependencies.
 *)
type instrinsics_ret_spec =
  | ExactRet of Ctype.ctype (* fixed type *)
  | CopyRet of nat (* the type must be derived from the
                      resolved type of one of the arguments. *)

type intrinsics_arg_spec =
  | ExactArg of Ctype.ctype (* fixed type *)
  | PolymorphicArg of (list type_predicate) (* any type matching this perdicate *)
  | CopyArg of nat (* the type of this argument will be derived from
                      the resolved type of another PolymorphicArg or
                      ExactArg argument with the given index. The
                      double indirection CopyArg pointing to another
                      CopyArg), or loops (CopyArg pointing to itself)
                      are not allowed. *)

(* An intrinsic signature is a specification of return type and list
   of arguments' type specifications. *)
type intrinsics_signature = instrinsics_ret_spec * list intrinsics_arg_spec

instance (Show intrinsics_arg_spec)
  let show = function
    | ExactArg ty ->
        "ExactArg"
    | PolymorphicArg _ ->
        "PolymorphicArg"
    | CopyArg i ->
        "CopyArg(" ^ show i ^ ")"
  end
end
(*


type pointer_shift =
(* TODO: bring back symbols *)
(*  list (Core_ctype.ctype * Symbolic.symbolic) *)
  list (Core_ctype.ctype * integer)


type pointer_value =
  | PVnull of Core_ctype.ctype
  | PVobject of object_id * pointer_shift
  | PVfunction of Symbol.t


type integer_value_operator =
  | IntAdd
  | IntSub
  | IntMul
  | IntDiv
  | IntMod
  | IntExp

type integer_value =
  | IVinteger of integer
  | IVsymbolic of Symbolic.symbolic (* possibly-symbolic integer value *)
  | IVptrdiff of pointer_value * pointer_value
  | IVintptr of pointer_value
  | IVop of integer_value_operator * integer_value * integer_value


type mem_value =
  | MVunspecified of Core_ctype.ctype (* this should only be used for base and union types *)
  | MVinteger of integer_value
  | MVfloating of string
  | MVpointer of pointer_value
  | MVarray of list mem_value (* TODO: list (maybe mem_value) *)
  | MVstruct of Symbol.t * list (Cabs.identifier * mem_value)
  | MVunion of Symbol.t * Cabs.identifier * mem_value (* the symbols are respectively the tag and the member *)


*)


type memory_flags = <|
  allow_multi_provenance: bool; (* allow Prov_some aids, where aids is not a singleton *)
  
|>


type memory_flag =
  | Allow_disjoint_alloc_tests (* allow (for example) pointer equality between different objects *)



(* https://hoogle.haskell.org/?hoogle=sequence
  Should be in some generic library module.
*)
val     either_sequence: forall 'a 'b. list (either 'a 'b) -> either 'a (list 'b)
let rec either_sequence xs =
  match xs with
    | [] ->
        Right []
    | Left msg :: _ ->
        Left msg
    | (Right x) :: xs ->
        match either_sequence xs with
          | Left msg ->
              Left msg
          | Right xs' ->
              Right (x::xs')
        end
  end

(* Function to derive an actual signature given the list
  of actual argument types and specification as returned
  by [get_intrinsic_type_spec].

  Returns None in case of error or a signature as a list
  of types. The first one is the type of return value and
  the remaining ones are types of arguments.
*)
let try_usual_arithmetic (Ctype.Ctype _ ty1) (Ctype.Ctype _ ty2) =
  match (ty1, ty2) with
    | (Ctype.Basic (Ctype.Integer ity1), Ctype.Basic (Ctype.Integer ity2)) ->
        Just (Ctype.Ctype [] (Ctype.Basic (Ctype.Integer (AilTypesAux.usual_arithmetic_integer (Implementation.integerImpl ()) ity1 ity2))))
    | _ ->
        Nothing
  end

val resolve_arg:
  nat -> (nat -> Ctype.ctype * bool) -> (nat -> intrinsics_arg_spec) -> (Ctype.ctype * bool) -> intrinsics_arg_spec -> either string Ctype.ctype
let rec resolve_arg n get_arg get_spec (arg, is_null_pointer_constant) spec =
  let resolve_arg = resolve_arg n get_arg get_spec in
  match spec with
    | ExactArg ty ->
        if Ctype.ctypeEqual arg ty then
          Right arg
        else match try_usual_arithmetic ty arg with
          | Just usual_ty ->
              if Ctype.ctypeEqual usual_ty ty then
                Right usual_ty
              else
                Left "ExactArg -- common type didn't match"
          | Nothing ->
              Left "ExactArg -- type mismatch"
        end
    | PolymorphicArg tyl ->
      let opt =
        List.foldl (fun acc p ->
          match (acc, p) with
            | (Just ty, _) ->
                Just ty
            | (Nothing, TyPred pred) ->
                if pred arg then
                  Just arg
                else
                  Nothing
            | (Nothing, TyIsPointer) ->
                if AilTypesAux.is_pointer arg then
                  Just arg
                else if is_null_pointer_constant then
                  Just (Ctype.mk_ctype_pointer Ctype.no_qualifiers Ctype.void)
                else
                  Nothing
          end
        ) Nothing tyl in
      match opt with
        | Just ty ->
            Right ty
        | Nothing ->
            Left "PolymorphicArg -- all preds failed"
      end
    | CopyArg i ->
      if i>=n then Left "CopyArg -- invalid index" (* spec error! *)
      else
        match get_spec i with
          | CopyArg _ ->
              Left "CopyArg -- dual indirection not allowed!"
          | spec' ->
              resolve_arg (get_arg i) spec'
        end
  end

let inline get xs idx =
  match List.index xs idx with
    | Just z ->
        z
    | Nothing ->
        error "Mem_common.derive_intrinsic_signature: internal error (get)"
  end 

val derive_intrinsic_signature: list (Ctype.ctype * bool) -> intrinsics_signature -> either string (Ctype.ctype * list Ctype.ctype)
let derive_intrinsic_signature args (ret_spec, specs) =
  let n = List.length args in
  if n <> List.length specs then Left "|args| <> |specs|"
  else
    match either_sequence (Utils.map2 (resolve_arg n (get args) (get specs)) args specs) with
      | Left msg ->
          Left msg
      | Right tys ->
          Right match ret_spec with
            | ExactRet ty ->
                (ty, tys)
            | CopyRet i ->
                (get tys i, tys)
          end
    end
