open import Pervasives Symbol GenTypes Ctype
import Loc

type simple_assignment_violation =
  | IncompatibleType
  | IncompatiblePointerType
  | DiscardsQualifiers
  | NotArithmetic
  | BoolExpectsArithmeticOrPointer

type arith_binop_violation =
  (* 6.5.5 Multiplicative operators *)
  | MultiplicativeInvalidOperandsType (* §6.5.5#2, sentence 1 *)
  | ModInvalidOperandsType (* §6.5.5#2, sentence 2 *)
  (* 6.5.6 Additive operators *)
  | AdditiveOperandsArithmeticType (* §6.5.6#2 *)
  (* 6.5.7 Bitwise shift operators *)
  | BitwiseShiftInvalidOperandsType (* §6.5.7#2 *)
  (* 6.5.10 Bitwise AND operator *)
  | BitwiseAndInvalidOperandsType (* §6.5.10#2 *)
  (* 6.5.11 Bitwise exclusive OR operator *)
  | BitwiseXorInvalidOperandsType (* §6.5.11#2 *)
  (* 6.5.12 Bitwise inclusive OR operator *)
  | BitwiseOrInvalidOperandsType (* §6.5.12#2 *)

type atomic_operations_synopsys =
  | AtomicLoad
  | AtomicStore
  | AtomicExchange
  | AtomicCompareExchange

type illegal_alignas =
  | IllegalAlignas_typedef
  | IllegalAlignas_bitfield
  | IllegalAlignas_function
  | IllegalAlignas_parameter
  | IllegalAlignas_register

type illegal_initialisation =
  | InitialisedIncomplete of ctype
  | InitialisedVLA

type invalid_generic_association =
  | InvalidGenericAssociation_not_object
  | InvalidGenericAssociation_incomplete
  | InvalidGenericAssociation_VLA

type violation =
  (* 6.5 Expressions *)
  (* 6.5.1.1 Generic selection *)
  | GenericSelectionMultipleDefault (* §6.5.1.1#2, sentence 1 *)
  | GenericSelectionIncorrectType of (qualifiers * ctype) * invalid_generic_association (* §6.5.1.1#2, sentence 2 *)
  | GenericSelectionOverlapping of (qualifiers * ctype) * (qualifiers * ctype) (* §6.5.1.1#2, sentence 3 *)
  | GenericSelectionMultipleMatch of genType (* §6.5.1.1#2, sentence 4 *)
  | GenericSelectionNoMatch of genType (* §6.5.1.1#2, sentence 5 *)
  (* 6.5.2.2 Function calls *)
  | FunctionCallIncompleteReturnType of ctype (* §6.5.2.2#1 *)
  | FunctionCallArrayReturnType of ctype (* §6.5.2.2#1 *)
  | FunctionCallIncorrectType (* §6.5.2.2#1 *)
  | FunctionCallTooManyArguments of nat (*expected*) * nat (*have*) (* §6.5.2.2#2, sentence 1 *)
  | FunctionCallTooFewArguments of nat (*expected*) * nat (*have*) (* §6.5.2.2#2, sentence 1 *)
  (* 6.5.2.3 Structure and union members *)
  | MemberofReferenceBaseTypeLvalue of qualifiers * ctype  (* §6.5.2.3#1 *)
  | MemberofReferenceBaseTypeRvalue of genType  (* §6.5.2.3#1 *)
  | MemberofNoMemberLvalue of identifier * qualifiers * ctype (* §6.5.2.3#1 *)
  | MemberofNoMemberRvalue of identifier * genType (* §6.5.2.3#1 *)
  | MemberofIncompleteLvalue of qualifiers * ctype (* §6.5.2.3#1 (indirect consequence of the need for a member to exist) *)
  | MemberofIncompleteRvalue of genType (* §6.5.2.3#1 (indirect consequence of the need for a member to exist) *)
  | MemberofptrReferenceBaseType of qualifiers * ctype  (* §6.5.2.3#2 *)
  | MemberofptrReferenceTypeNotPointer of genType  (* §6.5.2.3#2 *)
  | MemberofptrNoMember of identifier * qualifiers * ctype (* §6.5.2.3#2 *)
  | MemberofptrIncomplete of qualifiers * ctype (* §6.5.2.3#1 (indirect consequence of the need for a member to exist) *)
  (* 6.5.2.5 Compound literals *)
  | InvalidTypeCompoundLiteral (* §6.5.2.5#1 *)
  (* 6.5.3.1 Prefix increment and decrement operators *)
  | UnaryExpressionNotLvalue (* §6.5.3.1#1 *)
  | InvalidArgumentTypeUnaryIncrement of ctype (* §6.5.3.1#1 *)
  | InvalidArgumentTypeUnaryDecrement of ctype (* §6.5.3.1#1 *)
  (* 6.5.3.2 Address and indirection operators *)
  | UnaryAddressNotRvalue of genType (* §6.5.3.2#1 *)
  | UnaryAddressRegisterLvalue (* §6.5.3.2#1 *)
  | IndirectionNotPointer (* §6.5.3.2#2 *)
  (* 6.5.3.3 Unary arithmetic operators *)
  | InvalidArgumentTypeUnaryExpression of genType (* §6.5.3.3#1 *)
  (* 6.5.3.4 The sizeof and _Alignof operators *)
  | SizeofInvalidApplication of genType (* §6.5.3.4#1, sentence 1 *)
  | AlignofInvalidApplication of qualifiers * ctype (* §6.5.3.4#1, sentence 2 *)
  (* 6.5.4 Cast operators *)
  | CastInvalidType of qualifiers * ctype (* §6.5.4#2 *)
  | CastPointerToFloat (* §6.5.4#4, sentence 1 *)
  | CastFloatToPointer (* §6.5.4#4, sentence 2 *)
  (* 6.5.{5,6,7,10,11,12} Arithmetic binary operators *)
  | ArithBinopOperandsType of arith_binop_violation * genType * genType
  (* 6.5.8 Relational operators *)
  | RelationalInvalidOperandsType of genType * genType (* §6.5.8#2 *)
  (* 6.5.9 Equality operators *)
  | EqualityInvalidOperandsType of genType * genType (* §6.5.9#2 *)
  (* 6.5.13 Logical AND operator *)
  | AndInvalidOperandsType of genType * genType (* §6.5.13#2 *)
  (* 6.5.14 Logical OR operator *)
  | OrInvalidOperandsType of genType * genType (* §6.5.14#2 *)
  (* 6.5.15 Conditional operator *)
  | ConditionalOperatorControlType of genType (* §6.5.15#2 *)
  | ConditionalOperatorInvalidOperandTypes of genType * genType (* §6.5.15#3 *)
  (* 6.5.16 Assignment operators *)
  | AssignmentModifiableLvalue
  (* 6.5.16.1 Simple assignment *)
  | SimpleAssignmentViolation of simple_assignment_violation * ctype * genType (* §6.5.16.1#1 *)
  (* 6.5.16.2 Compound assignment *)
  | CompoundAssignmentAddSubOperandTypes of genType * genType (* §6.5.16.2#1 *)
  | CompoundAssignmentOthersOperandTypes of arith_binop_violation * genType * genType (* §6.5.16.2#2 *)
  (* 6.6 Constant expressions *)
  | IntegerConstantOutRange (* §6.6#4 *)
  (* 6.7 Declarations *)
  | NoLinkageMultipleDeclaration of identifier (* §6.7#3 *)
  | TypedefRedefinition (* §6.7#3, 1st bullet *)
  | TypedefRedefinitionVariablyModifiedType (* §6.7#3, 1st bullet, sentence 2 *)
  | SameScopeIncompatibleDeclarations (* §6.7#4 *)
  (* 6.7.1 Storage-class specifiers *)
  | IllegalMultipleStorageClasses (* §6.7.1#2 *)
  | IllegalMultipleStorageClassesThreadLocal (* §6.7.1#3, sentence 1 *)
  | ThreadLocalShouldAppearInEveryDeclaration (* §6.7.1#3, sentence 2 *)
  | ThreadLocalFunctionDeclaration (* §6.7.1#4 *)
  (* 6.7.2 Type specifiers *)
  | NoTypeSpecifierInDeclaration (* §6.7.2#2 *)
  | IllegalTypeSpecifierInDeclaration (* §6.7.2#2 *)
  (* 6.7.2.1 Struct and union specifiers *)
  | StructDeclarationLacksDeclaratorList (* §6.7.2.1#2 *)
  | StructMemberIncompleteType of qualifiers * ctype (* §6.7.2.1#3, sentence 1 *)
  | StructMemberFunctionType of identifier (* §6.7.2.1#3, sentence 1 *)
  | StructMemberFlexibleArray (* §6.7.2.1#3, sentence 2 *)
  | StructMemberFlexibleArrayInArray (* §6.7.2.1#3, sentence 2, "element of array" *)
  | IllegalFlexibleArrayMember of identifier (* §6.7.2.1#18 *)
  (* 6.7.2.1 Enum specifiers *)
  | WrongTypeEnumConstant (* §6.7.2.2#2 *)
  (* 6.7.2.3 Tags *)
  | TagRedefinition of sym (* §6.7.2.3#1 *)
  | TagRedeclaration of sym (* §6.7.2.3#2 *)
  | EnumTagIncomplete (* §6.7.2.3#3 *)
  (* 6.7.2.4 Atomic type specifiers *)
  | AtomicTypeConstraint (* §6.7.2.4#3 *)
  (* Type qualifier *)
  | RestrictQualifiedTypeConstraint (* §6.7.3#2 *)
  | RestrictQualifiedPointedTypeConstraint of ctype (* §6.7.3#2 *)
  (* 6.7.5 Alignment specifier *)
  | IllegalAlignas of illegal_alignas (* §6.7.5#2 *)
  | AlignasNotIntegerConstant (* §6.7.5#3, sentence 1 *)
  | AlignasInvalidIntegerConstant (* §6.7.5#3, sentence 2 *)
  | AlignasLessThanRequired of ctype (* §6.7.5#4 *)
  (* 6.7.6 Declarators *)
  | ArrayDeclarationNegativeSize (* §6.7.6.2#1, sentence 3 *)
  | ArrayDeclarationIncompleteType (* §6.7.6.2#1, sentence 4 *)
  | ArrayDeclarationFunctionType (* §6.7.6.2#1, sentence 4 *)
  | ArrayDeclarationQsAndStaticOnlyOutmost (* §6.7.6.2#1, sentence 5 *)
  | ArrayDeclarationQsAndStaticOutsideFunctionProto (* §6.7.6.2#1, sentence 5 *)
  | IllegalReturnTypeFunctionDeclarator (* §6.7.6.3#1 *)
  | IllegalStorageClassFunctionDeclarator (* §6.7.6.3#2 *)
  | IncompleteParameterTypeFunctionDeclarator (* §6.7.6.3#4 *)
  (* 6.7.9 Initialization *)
  | IllegalInitialisation of illegal_initialisation (* §6.7.9#3 *)
  | IllegalStorageClassStaticOrThreadInitializer (* §6.7.9#4 *)
  | IllegalLinkageAndInitialization (* §6.7.9#5 *)
  | IllegalArrayDesignatorUsage (* §6.7.9#6, sentence 1 *)
  | IllegalTypeArrayDesignator (* §6.7.9#6, sentence 1 *)
  | IllegalSizeArrayDesignator (* §6.7.9#6, sentence 2 *)
  | IllegalMemberDesignatorUsage (* §6.7.9#7 *)
  | IllegalMemberDesignatorFlexibleArrayMember of Symbol.identifier (* §6.7.9#3 *)
  | IllegalMemberDesignator of Symbol.identifier * ctype (* §6.7.9#7 *)
  | InitializationAsSimpleAssignment of simple_assignment_violation * ctype * genType (* §6.7.9#11, sentence 2 *)
  (* 6.7.10 Static assertions *)
  | StaticAssertFailed of string (* §6.7.10#2 *)
  (* 6.8 Statements and blocks *)
  (* 6.8.1 Labeled statements *)
  | LabelStatementOutsideSwitch (* §6.8.1#2 *)
  | LabelRedefinition of identifier (* §6.8.1#3 *)
  (* 6.8.4.1 The if statement *)
  | IfStatementControllingExpressionNotScalar (* §6.8.4.1#1 *)
  (* 6.8.4.2 The switch statement *)
  | SwitchStatementControllingExpressionNotInteger (* §6.8.4.2#1 *)
  | CaseStatementOverlap of Loc.t
  | MutipleDefaultStatement of Loc.t
  (* 6.8.5 Iteration statements *)
  | IterationStatementControllingExpressionNotScalar (* §6.8.5#2 *)
  | IllegalStorageClassIterationStatement(* §6.8.5#3 *)
  (* 6.8.5 Jump statements *)
  | UndeclaredLabel of identifier (* §6.8.6.1#1, sentence 1 *)
  | ContinueOutsideLoop (* §6.8.6.2#1 *)
  | BreakOutsideSwitchOrLoop (* §6.8.6.3#1 *)
  (* 6.8.5.4 The return statement  *)
  | NonVoidReturnVoidFunction (* §6.8.6.4#1, sentence 1 *)
  | VoidReturnNonVoidFunction (* §6.8.6.4#1, sentence 2 *)
  | ReturnAsSimpleAssignment of simple_assignment_violation * ctype * genType (* §6.8.6.4#3, sentence 2 *)
  (* 6.9 External definitions *)
  | IllegalStorageClassFileScoped (* §6.9#2 *)
  | ExternalRedefinition of sym (* §6.9#3 *)
  (* 6.9.1 Function definitions *)
  | WrongTypeFunctionIdentifier (*  §6.9.1#2 *)
  | IllegalStorageClassFunctionDefinition (* §6.9.1#4 *)
  | IllegalIdentifierTypeVoidInFunctionDefinition (* §6.9.1#5, sentence 1 *)
  | UniqueVoidParameterInFunctionDefinition (* §6.9.1#5 *)
  | FunctionParameterAsSimpleAssignment of simple_assignment_violation * ctype * genType (* §6.9.1#10 *)
  | TentativeNotCompleted of ctype (* §6.9.2#2, sentence 2 (implied in conjunction with §6.7.9#3) *)
  (* 7 Library *)
  (* 7.2 Diagnostics <assert.h> *)
  (* 7.2.1.1 The assert macro *)
  | AssertMacroExpressionScalarType (* §7.2.1.1#2 *)
  (* 7.17 Atomics <stdatomic.h> *)
  | AtomicAddressArgumentMustBeAtomic of atomic_operations_synopsys * ctype
  | AtomicAddressArgumentMustBePointer of atomic_operations_synopsys * genType
  (* GNU extensions *)
  (* ?: operator *)
  | GNUConditionalOperatorInvalidOperandType of genType
  | GNUBuiltinChooseExprNotIntegerConstant
  (* Byte *)
  | TypedefBytesAreUnsignedCharsOnly
  | CastToFromByte


type assignment_violation =
  simple_assignment_violation -> ctype -> genType -> violation

let std_of_assign_violation = function
  | IncompatibleType ->
      ["§6.5.16.1#1"; "FOOTNOTE.112"]
  | IncompatiblePointerType ->
      ["§6.5.16.1#1, bullet 3 and 4"; "FOOTNOTE.112"]
  | DiscardsQualifiers ->
      ["§6.5.16.1#1, bullet 3 and 4"; "FOOTNOTE.112"]
  | NotArithmetic ->
      ["§6.5.16.1#1, bullet 1"]
  | BoolExpectsArithmeticOrPointer ->
      ["§6.5.16.1#1, bullet 6"]
end

let std_of_arith_binop_violation = function
  | MultiplicativeInvalidOperandsType ->
      ["§6.5.5#2, sentence 1"]
  | ModInvalidOperandsType ->
      ["§6.5.5#2, sentence 2"]
  | AdditiveOperandsArithmeticType ->
      ["§6.5.6#2"]
  | BitwiseShiftInvalidOperandsType ->
      ["§6.5.7#2"]
  | BitwiseAndInvalidOperandsType ->
      ["§6.5.10#2"]
  | BitwiseXorInvalidOperandsType ->
      ["§6.5.11#2"]
  | BitwiseOrInvalidOperandsType ->
      ["§6.5.12#2"]
end

let std_of_atomic_operation_synopsis = function
  | AtomicStore ->
      ["§7.17.7.1#1"]
  | AtomicLoad ->
      ["§7.17.7.2#1"]
  | AtomicExchange ->
      ["§7.17.7.3#1"]
  | AtomicCompareExchange ->
      ["§7.17.7.4#1"]
end

let std_of_violation = function
  | GenericSelectionMultipleDefault ->
      ["§6.5.1.1#2, sentence 1"]
  | GenericSelectionIncorrectType _ _ ->
      ["§6.5.1.1#2, sentence 2"]
  | GenericSelectionOverlapping _ _ ->
      ["§6.5.1.1#2, sentence 3"]
  | GenericSelectionMultipleMatch _ ->
      ["§6.5.1.1#2, sentence 4"]
  | GenericSelectionNoMatch _ ->
      ["§6.5.1.1#2, sentence 5"]
  | FunctionCallIncompleteReturnType _ -> 
      ["§6.5.2.2#1"]
  | FunctionCallArrayReturnType _ ->
      ["§6.5.2.2#1"]
  | FunctionCallIncorrectType ->
      ["§6.5.2.2#1"]
  | FunctionCallTooManyArguments _ _ ->
      ["§6.5.2.2#2, sentence 1"]
  | FunctionCallTooFewArguments _ _ ->
      ["§6.5.2.2#2, sentence 1"]
  | MemberofReferenceBaseTypeLvalue _ _ ->
      ["§6.5.2.3#1"]
  | MemberofReferenceBaseTypeRvalue _ ->
      ["§6.5.2.3#1"]
  | MemberofNoMemberLvalue _ _ _ ->
      ["§6.5.2.3#1"]
  | MemberofNoMemberRvalue _ _ ->
      ["§6.5.2.3#1"]
  | MemberofIncompleteLvalue _ _ ->
      ["§6.5.2.3#1"]
  | MemberofIncompleteRvalue _ ->
      ["§6.5.2.3#1"]
  | MemberofptrReferenceBaseType _ _ ->
      ["§6.5.2.3#2"]
  | MemberofptrReferenceTypeNotPointer _ ->
      ["§6.5.2.3#2"]
  | MemberofptrNoMember _ _ _ ->
      ["§6.5.2.3#2"]
  | MemberofptrIncomplete _ _ ->
      ["§6.5.2.3#2"]
  | InvalidTypeCompoundLiteral ->
      ["§6.5.2.5#1"]
  | UnaryExpressionNotLvalue ->
      ["§6.5.3.1#1"]
  | InvalidArgumentTypeUnaryIncrement _ ->
      ["§6.5.3.1#1"]
  | InvalidArgumentTypeUnaryDecrement _ ->
      ["§6.5.3.1#1"]
  | UnaryAddressNotRvalue _ ->
      ["§6.5.3.2#1"]
  | UnaryAddressRegisterLvalue ->
      ["§6.5.3.2#1"]
  | InvalidArgumentTypeUnaryExpression _ ->
      ["§6.5.3.3#1"]
  | SizeofInvalidApplication _ ->
      ["§6.5.3.4#1, sentence 1"]
  | AlignofInvalidApplication _ _ ->
      ["§6.5.3.4#1, sentence 2"]
  | CastInvalidType _ _ ->
      ["§6.5.4#2"]
  | CastPointerToFloat ->
      ["§6.5.4#4, sentence 1"]
  | CastFloatToPointer ->
      ["§6.5.4#4, sentence 2"]
  | IndirectionNotPointer ->
      ["§6.5.3.2#2"]
  | ArithBinopOperandsType viol _ _ ->
      std_of_arith_binop_violation viol
  | RelationalInvalidOperandsType _ _ ->
      ["§6.5.8#2"]
  | EqualityInvalidOperandsType _ _ ->
      ["§6.5.9#2"]
  | AndInvalidOperandsType _ _ ->
      ["§6.5.13#2"]
  | OrInvalidOperandsType _ _ ->
      ["§6.5.14#2"]
  | ConditionalOperatorControlType _ ->
      ["§6.5.15#2"]
  | ConditionalOperatorInvalidOperandTypes _ _ ->
      ["§6.5.15#3"]
  | AssignmentModifiableLvalue ->
      ["§6.5.16#2"]
  | SimpleAssignmentViolation viol _ _ ->
      std_of_assign_violation viol
  | CompoundAssignmentAddSubOperandTypes _ _ ->
      ["§6.5.16.2#1"]
  | CompoundAssignmentOthersOperandTypes viol _ _ ->
      "§6.5.16.2#2" :: std_of_arith_binop_violation viol
  | IntegerConstantOutRange ->
      ["§6.6#4"]
  | NoLinkageMultipleDeclaration _ ->
      ["§6.7#3"]
  | TypedefRedefinition ->
      ["§6.7#3, bullet 1"]
  | TypedefRedefinitionVariablyModifiedType ->
      ["§6.7#3, bullet 1, sentence 2"]
  | SameScopeIncompatibleDeclarations ->
      ["§6.7#4"]
  | IllegalMultipleStorageClasses ->
      ["§6.7.1#2"]
  | IllegalMultipleStorageClassesThreadLocal ->
      ["§6.7.1#3, sentence 1"]
  | ThreadLocalShouldAppearInEveryDeclaration ->
      ["§6.7.1#3, sentence 2"]
  | ThreadLocalFunctionDeclaration ->
      ["§6.7.1#4"]
  | NoTypeSpecifierInDeclaration ->
      ["§6.7.2#2, sentence 2"]
  | IllegalTypeSpecifierInDeclaration ->
      ["§6.7.2#2"]
  | StructDeclarationLacksDeclaratorList ->
      ["§6.7.2.1#2"]
  | StructMemberIncompleteType _ _ ->
      ["§6.7.2.1#3, sentence 1"]
  | StructMemberFunctionType _ ->
      ["§6.7.2.1#3, sentence 1"]
  | StructMemberFlexibleArray ->
      ["§6.7.2.1#3, sentence 2"]
  | StructMemberFlexibleArrayInArray ->
      ["§6.7.2.1#3, sentence 2"]
  | IllegalFlexibleArrayMember _ ->
      ["§6.7.2.1#18"]
  | WrongTypeEnumConstant ->
      ["§6.7.2.2#2"]
  | TagRedefinition _ ->
      ["§6.7.2.3#1"]
  | TagRedeclaration _ ->
      ["§6.7.2.3#2"]
  | EnumTagIncomplete ->
      ["§6.7.2.3#3"]
  | AtomicTypeConstraint ->
      ["§6.7.2.4#3"]
  | RestrictQualifiedTypeConstraint ->
      ["§6.7.3#2"]
  | RestrictQualifiedPointedTypeConstraint _ ->
      ["§6.7.3#2"]
  | IllegalAlignas _ ->
      ["§6.7.5#2"]
  | AlignasNotIntegerConstant ->
      ["§6.7.5#3, sentence 1"]
  | AlignasInvalidIntegerConstant ->
      ["§6.7.5#3, sentence 2"]
  | AlignasLessThanRequired _ ->
      ["§6.7.5#4"]
  | ArrayDeclarationNegativeSize ->
      ["§6.7.6.2#1, sentence 3"]
  | ArrayDeclarationIncompleteType ->
      ["§6.7.6.2#1, sentence 4"]
  | ArrayDeclarationFunctionType ->
      ["§6.7.6.2#1, sentence 4"]
  | ArrayDeclarationQsAndStaticOnlyOutmost ->
      ["§6.7.6.2#1, sentence 5"]
  | ArrayDeclarationQsAndStaticOutsideFunctionProto ->
      ["§6.7.6.2#1, sentence 5"]
  | IllegalReturnTypeFunctionDeclarator ->
      ["§6.7.6.3#1"]
  | IllegalStorageClassFunctionDeclarator ->
      ["§6.7.6.3#2"]
  | IncompleteParameterTypeFunctionDeclarator ->
      ["§6.7.6.3#4"]
  | IllegalInitialisation _ ->
      ["§6.7.9#3"]
  | IllegalStorageClassStaticOrThreadInitializer ->
      ["§6.7.9#4"]
  | IllegalLinkageAndInitialization ->
      ["§6.7.9#5"]
  | IllegalArrayDesignatorUsage ->
      ["§6.7.9#6, sentence 1"]
  | IllegalTypeArrayDesignator ->
      ["§6.7.9#6, sentence 1"]
  | IllegalSizeArrayDesignator ->
      ["§6.7.9#6, sentence 2"]
  | IllegalMemberDesignatorUsage ->
      ["§6.7.9#3"]
  | IllegalMemberDesignatorFlexibleArrayMember _ ->
      ["§6.7.9#3"]
  | IllegalMemberDesignator _ _ ->
      ["§6.7.9#7"]
  | InitializationAsSimpleAssignment viol _ _ ->
      "§6.7.9#11, sentence 2" :: std_of_assign_violation viol
  | StaticAssertFailed _ ->
      ["§6.7.10#2"]
  | LabelStatementOutsideSwitch ->
      ["§6.8.1#2"]
  | LabelRedefinition _ ->
      ["§6.8.1#3"]
  | IfStatementControllingExpressionNotScalar ->
      ["§6.8.4.1#1"]
  | SwitchStatementControllingExpressionNotInteger ->
      ["§6.8.4.2#1"]
  | CaseStatementOverlap _ ->
      ["§6.8.4.2#3, sentence 1"]
  | MutipleDefaultStatement _ ->
      ["§6.8.4.2#3, sentence 2"]
  | IterationStatementControllingExpressionNotScalar ->
      ["§6.8.5#2"]
  | IllegalStorageClassIterationStatement ->
      ["§6.8.5#3"]
  | ContinueOutsideLoop ->
      ["§6.8.6.2#1"]
  | UndeclaredLabel _ ->
      ["§6.8.6.1#1, sentence 1"]
  | BreakOutsideSwitchOrLoop ->
      ["§6.8.6.3#1"]
  | NonVoidReturnVoidFunction ->
      ["§6.8.6.4#1, sentence 1"]
  | VoidReturnNonVoidFunction ->
      ["§6.8.6.4#1, sentence 2"]
  | ReturnAsSimpleAssignment viol _ _ ->
      ["§6.8.6.4#3, sentence 2"; "FOOTNOTE.160"] ++ std_of_assign_violation viol
  | IllegalStorageClassFileScoped ->
      ["§6.9#2"]
  | ExternalRedefinition _ ->
      ["§6.9#3"]
  | WrongTypeFunctionIdentifier ->
      ["§6.9.1#2"]
  | IllegalStorageClassFunctionDefinition ->
      ["§6.9.1#4"]
  | IllegalIdentifierTypeVoidInFunctionDefinition ->
      ["§6.9.1#5, sentence 1"]
  | UniqueVoidParameterInFunctionDefinition ->
      ["§6.9.1#5, sentence 2"]
  | FunctionParameterAsSimpleAssignment viol _ _ ->
      "§6.9.1#10" :: std_of_assign_violation viol
  | TentativeNotCompleted _ ->
      []
  | AssertMacroExpressionScalarType ->
      ["§7.2.1.1#2"]
  | AtomicAddressArgumentMustBeAtomic op _ ->
      "§7.17.1#5" :: std_of_atomic_operation_synopsis op
  | AtomicAddressArgumentMustBePointer op _ ->
      std_of_atomic_operation_synopsis op
  | GNUConditionalOperatorInvalidOperandType _ ->
      []
  | GNUBuiltinChooseExprNotIntegerConstant ->
      []
  | TypedefBytesAreUnsignedCharsOnly ->
      []
  | CastToFromByte ->
      []
end
