(* Effects for Translation: state *)
open import Pervasives Utils Show Show_extra State
import Boot Symbol Undefined Ctype AilTypesAux
import Core Core_aux Ctype

module C    = Core
module Caux = Core_aux

include State

type wrapped_symbol = <|
  sym_sym: Symbol.sym;
  sym_pat: C.pattern;
  sym_pe: C.pexpr;
|>

type compound_literal_info =
  ( Loc.t
  * Symbol.prefix
  * Symbol.sym
  * bool (* is const *)
  * Ctype.ctype )

type elab_state = <|
  visible_objects_types: map Symbol.sym (Ctype.qualifiers * Ctype.ctype);
  visible_objects: list (list Symbol.sym); (* visible C objects with scoping (used to properly
                                              annotate Esave/Erun ctors) *)
  string_literals: list (Loc.t * Symbol.sym * Ctype.ctype * C.pexpr);
  compound_literals: list compound_literal_info;
  temporary_objects: list (wrapped_symbol * Ctype.ctype);
  visible_objects_types_markers_env: map nat (list (Symbol.sym * Ctype.ctype));

  cheri_const_alias: map Symbol.sym Symbol.sym;

  errors: list string;
  
  (* readonly *)
  calling_convention: C.calling_convention;
|>

type elabM 'a = stateM 'a elab_state

val elab_init: C.calling_convention -> elab_state
let elab_init callconv = <|
  visible_objects_types= Map.empty;
  visible_objects= [[]];
  string_literals= [];
  compound_literals= [];
  temporary_objects= [];
  visible_objects_types_markers_env = Map.empty;
  cheri_const_alias= Map.empty;
  errors = [];
  calling_convention= callconv;
|>

val get_calling_convention: elabM C.calling_convention
let get_calling_convention =
  fun st -> (st.calling_convention, st)


(* TODO: this does not need to be in the monad, but it is useful to unsure
   proper ordering (for "intuitive" sym number) *)
val wrapped_fresh_symbol: C.core_base_type -> elabM wrapped_symbol
let wrapped_fresh_symbol bTy =
  let sym = Symbol.fresh () in
  return <|sym_sym= sym; sym_pat= Caux.mk_sym_pat sym bTy; sym_pe= Caux.mk_sym_pe sym |>

val wrapped_fresh_symbol_: Symbol.symbol_description -> C.core_base_type -> elabM (Symbol.sym * C.pattern * C.pexpr)
let wrapped_fresh_symbol_ descr bTy =
  let sym = Symbol.fresh_description descr in
  return (sym, Caux.mk_sym_pat sym bTy, Caux.mk_sym_pe sym)


(* TODO: this does not need to be in the monad *)
(* val wrapped_fresh_symbol_descr: C.core_base_type -> Symbol.symbol_description -> elabM (Symbol.sym * C.pattern * C.pexpr)
 * let wrapped_fresh_symbol_descr bTy descr =
 *   let sym = Symbol.fresh_description descr in
 *   return (sym, Caux.mk_sym_pat sym bTy, Caux.mk_sym_pe sym) *)

(* register C objects from block scope. *)
val push_block_objects: list (Symbol.sym * (Ctype.qualifiers * Ctype.ctype)) -> elabM unit
let push_block_objects binds = fun st ->
  ((), <| st with
    visible_objects_types= List.foldl (fun acc (sym, qs_ty) -> Map.insert sym qs_ty acc) st.visible_objects_types binds;
    visible_objects= (List.map fst binds) :: st.visible_objects
  |>)

(* forget C objects from the most recent block. *)
val pop_block_objects: elabM unit
let pop_block_objects = fun st ->
  ((), <| st with visible_objects=
      match st.visible_objects with
        | _ :: xs -> xs
        | _       -> error "[Translation.E.pop_block_objects] found an ill-formed scope stack."
      end |>)

val cheri_const_alias_map: elabM (map Symbol.sym Symbol.sym)
let cheri_const_alias_map = fun st ->
  (st.cheri_const_alias, st)

val with_block_objects: forall 'a. list (Symbol.sym * (Ctype.qualifiers * Ctype.ctype)) -> elabM 'a ->
  elabM (list (Symbol.sym * (Ctype.qualifiers * Ctype.ctype * Symbol.sym)) * list compound_literal_info * 'a)
let with_block_objects binds ma = fun st ->
  let (new_aliases, cheri_const_alias) = List.foldl (fun (xs_acc, map_acc) (sym, (qs, ty)) ->
    (* TODO: fail if sym IN acc *)
    if qs.Ctype.const then
      let sym' = Symbol.fresh () in
      ((sym, (qs, ty, sym')) :: xs_acc, Map.insert sym sym' map_acc)
    else
      (xs_acc, map_acc)
  ) ([], st.cheri_const_alias) binds in
  let st' = <| st with
    visible_objects_types= List.foldl (fun acc (sym, qs_ty) -> Map.insert sym qs_ty acc) st.visible_objects_types binds;
    visible_objects= (List.map fst binds) :: st.visible_objects;
    compound_literals= [];
    cheri_const_alias = cheri_const_alias;
  |> in
  let (a, st'') = ma st' in
  ((new_aliases, st''.compound_literals, a), <| st'' with
    visible_objects=
      match st''.visible_objects with
        | _ :: xs -> xs
        | _       -> error "[Translation.E.with_block_objects] found an ill-formed scope stack."
      end;
    compound_literals= st.compound_literals |>)


val track_temporary_objects: forall 'a. elabM 'a -> elabM (list (wrapped_symbol * Ctype.ctype) * 'a)
let track_temporary_objects ma =
  fun st ->
    if st.temporary_objects <> [] then
      error "[Translation.E.track_temporary_objects]"
    else
      let (a, st') = ma st in
      ((st'.temporary_objects, a), <| st' with temporary_objects= [] |>)

val register_temporary_object: wrapped_symbol -> Ctype.ctype -> elabM unit
let register_temporary_object ptr_wrp ty =
  fun st -> ((), <| st with temporary_objects= (ptr_wrp, ty) :: st.temporary_objects |>)

(* returns the list of all the C objects in scope. *)
val get_visible_objects: elabM (list Symbol.sym)
let get_visible_objects = fun st ->
  (foldl (++) [] st.visible_objects, st)

val register_string_literal: Loc.t -> Symbol.sym -> Ctype.ctype -> C.pexpr -> elabM unit
let register_string_literal loc sym ty pe = fun st ->
  ((), <| st with string_literals= (loc, sym, ty, pe) :: st.string_literals |>)

val get_string_literals: elabM (list (Loc.t * Symbol.sym * Ctype.ctype * C.pexpr))
let get_string_literals = fun st ->
  (st.string_literals, st)

val register_compound_literal: Loc.t -> Symbol.prefix -> Symbol.sym -> bool -> Ctype.ctype -> elabM unit
let register_compound_literal loc prefix sym is_const ty = fun st ->
  ((), <| st with compound_literals= (loc, prefix, sym, is_const, ty) :: st.compound_literals |>)

val resolve_object_type: Symbol.sym -> elabM (Ctype.qualifiers * Ctype.ctype)
let resolve_object_type sym = fun st ->
  match Map.lookup sym st.visible_objects_types with
    | Just qs_ty ->
        (qs_ty, st)
    | Nothing ->
        (* let sym_str = match sym with
         *   | Symbol.Symbol _ n SD_None ->
         *       "sym_" ^ show n
         *   | Symbol.Symbol _ n (SD_Id str) ->
         *       str ^ "{" ^ show n ^ "}"
         * end in *)
        error ("Translation_effect.resolve_object_type ===> " ^ show sym)
  end



(* similar to Cabs_to_ail_effect.record_marker *)
val record_object_types_marker: unit -> elabM nat
let record_object_types_marker () = 
  let marker_id = Symbol.fresh_int () in
  begin
    if Global.backend_name () = "Cn" then
      get_visible_objects >>= fun visible_objects ->
      mapM (fun sym ->
        resolve_object_type sym >>= fun (_, ty) ->
        return (sym, ty)
      ) visible_objects >>= fun visible_objects_typed ->
      update (fun st ->
          <| st with visible_objects_types_markers_env =
                       Map.insert marker_id visible_objects_typed
                         st.visible_objects_types_markers_env |>
        )
    else
      return ()
  end >>
  return marker_id


(* record that an (unrecoverable) error occured, but don't abandon
   translation yet, so the user gets a full list of such errors *)
val record_error: string -> elabM unit
let record_error err =
    let () = Debug.print_unsupported err in
    update (fun st -> <| st with errors = err :: st.errors |>)

val record_error_at: Loc.t -> string -> elabM unit
let record_error_at loc err = record_error
    ((Loc.stringFromLocation (Loc.with_cursor loc)) ^ ": " ^ err)

val runStateM_errors: forall 'a. elabM 'a -> elab_state -> 'a * elab_state
let runStateM_errors m st =
  let (rv, st) = runStateM m st in
  match List.reverse st.errors with
    | [] -> (rv, st)
    | (err1 :: _) -> error err1
  end

