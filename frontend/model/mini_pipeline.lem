open import Pervasives Utils Symbol

import Pp

import Core 
module C = Core

module A = struct
  include import AilSyntax
  include import Ctype
end
import GenTypes GenTypesAux

(* Ail typing *)
import GenTyping ErrorMonad TypingError

(* Elaboration *)
open import Translation Translation_aux
import Translation_effect
module TranslateEff = Translation_effect

(* Core evaluation *)
import Core_run Core_run_aux Driver
import Nondeterminism
module ND = Nondeterminism


val runND_proxy:
  Driver.driverM Driver.driver_result -> Driver.driver_state ->
  list (ND.nd_status Driver.driver_result Driver.driver_error Driver.driver_state * list string * Driver.driver_state)


declare ocaml target_rep function runND_proxy = `Smt2.runND Exhaustive Impl_mem.cs_module`

val empty_sigma: forall 'a. A.sigma 'a
let empty_sigma = <|
  A.declarations= [];
  A.object_definitions= [];
  A.function_definitions= [];
  A.static_assertions= [];
  A.tag_definitions= [];
  A.extern_idmap= Map.empty;
  A.typedef_attributes= Map.empty;
  A.loop_attributes= Map.empty;
  A.cn_predicates= [];
  A.cn_functions= [];
  A.cn_lemmata= [];
  A.cn_datatypes= [];
  A.cn_decl_specs= [];
  A.cn_idents= Map.empty;
|>


import Exception Errors
module Eff = Exception
let inline (>>=) = Eff.bind


val evalConstantExpressionAux:
  Loc.t -> (map string Symbol.sym) * C.fun_map unit * C.impl ->
  A.sigma unit ->
  (GenTypes.genTypeCategory -> Eff.exceptM unit Errors.error) ->
  maybe Ctype.ctype -> A.expression unit -> Eff.exceptM C.value Errors.error

let evalConstantExpressionAux loc (*TODO*)(ailnames, stdlib_fun_map, impl) sigm typing_guard ty_opt expr =
  let toAilTau: A.expression unit -> ErrorMonad.errorM (A.expression GenTypes.genTypeCategory) =
    GenTyping.annotate_expression (GenTyping.annotate_block Nothing) sigm [] (*TODO: check*)GenTyping.CTXother in
  
  let toCore (a_e: A.expression GenTypes.genTypeCategory) : TranslateEff.elabM (Core.expr unit) =
    (* STD ยง6.6#4 *)
    (* NOTE: this constraint requires the evaluated constant to be within the range of expression's type *)
    let stdlib = Translation_aux.mk_translation_stdlib (ailnames, stdlib_fun_map) in
    let ty = match ty_opt with
      | Just ty ->
          ty
      | Nothing ->
          (* TODO/NOTE: this should correspond to constants from array sizes and such *)
          Translation_aux.ctype_of a_e
    end in
    let oTy = force_core_object_type_of_ctype ty in
    TranslateEff.bind (translate_expression true ECTX_other ((Nothing: maybe Symbol.sym), (Nothing: maybe Symbol.sym)) stdlib (translate_tag_definitions sigm.A.tag_definitions: C.core_tag_definitions) a_e) (fun core_e                       ->
    TranslateEff.bind (TranslateEff.wrapped_fresh_symbol (C.BTy_loaded oTy)) (fun e_wrp ->
    TranslateEff.bind (TranslateEff.wrapped_fresh_symbol (C.BTy_object oTy)) (fun obj_wrp ->
    TranslateEff.return begin
      Core_aux.mk_wseq_e e_wrp.TranslateEff.sym_pat core_e begin
        Core_aux.mk_pure_e begin
          Core_aux.mk_case_pe e_wrp.TranslateEff.sym_pe
            [ ( Core_aux.mk_specified_pat obj_wrp.TranslateEff.sym_pat
              , Core_aux.mk_if_pe
                  (stdlib.mkcall_is_representable obj_wrp.TranslateEff.sym_pe ty)
                  (Caux.mk_specified_pe obj_wrp.TranslateEff.sym_pe)
                  (Core_aux.mk_error_pe "ยง6.6#4 failed" obj_wrp.TranslateEff.sym_pe) )
            ; ( Core_aux.mk_unspecified_pat (Core_aux.mk_empty_pat C.BTy_ctype)
                (* TODO: this should be dead code? *)
              , obj_wrp.TranslateEff.sym_pe (* TODO: check with P *) ) ]
        end
      end
    end))) in
  
  (* typechecks the expression *)
  match ErrorMonad.runErrorMonad (toAilTau expr) with
    | Left (loc, err) ->
        Eff.fail (loc, Errors.DESUGAR Errors.Desugar_illtypedIntegerConstant)
    | Right a_expr ->
        (* applies the provided typing guard *)
        typing_guard (GenTypes.genTypeCategoryOf a_expr) >>= fun () ->

        let callconv =
          if Global.has_switch Global.SW_inner_arg_temps then Core.Inner_arg_callconv else Core.Normal_callconv in
        
        (* elaborate the typed expression into Core *)
        let (core_expr, translate_final_st) = TranslateEff.runStateM (toCore a_expr) (TranslateEff.elab_init callconv) in
        
        let dr_st =
          (* this just builds the shell of the driver state *)
          let dummy_core_file = Core_run_aux.convert_file
            <| C.main= Nothing
             ; C.calling_convention= callconv
             ; C.stdlib= stdlib_fun_map
             ; C.impl= impl
             ; C.globs= []
             ; C.funs= Map.empty
             ; C.tagDefs= Map.empty
             ; C.extern= Map.empty
             ; C.funinfo= Map.empty 
             ; C.loop_attributes= Map.empty 
             ; C.visible_objects_env = Map.empty
           |> 
          in
          let init_dr_st = Driver.initial_driver_state dummy_core_file Fs.fs_initial_state in
          (* spawning a thread with the Core expression we just generated as it's arena *)
          let ((tid, core_st), run_st) = State.runStateM (
            Core_run.spawn_thread Nothing <|
              Core_run.arena=  Core_run_aux.convert_expr core_expr;
              Core_run.stack=  Core_run.Stack_empty (*Core_run.push_empty_continuation Nothing Core_run.empty_stack*);
              Core_run.errno=  Mem.null_ptrval Ctype.signed_int;
              Core_run.env=    [Map.empty];
              Core_run.current_loc= loc;
              Core_run.exec_loc= Core_run.ELoc_normal []; (* TODO: maybe create a new variant *)
              Core_run.current_proc_opt= Nothing;
            |> init_dr_st.Driver.core_state
          ) init_dr_st.Driver.core_run_state in
          (* now we can build the actual driver's initial state *)
          <| init_dr_st with
           Driver.core_state= core_st;
           Driver.core_run_state= run_st |> in
        
        (* run the evaluator *)
        let driver_action =
          ND.bind (Driver.driver2 false) (fun () ->
            ND.bind ND.get (fun dr_st' ->
              ND.return (Driver.finalize "Mini_pipeline" dr_st')
            )
          ) in
        let execs = Ctype_aux.with_tagDefs (Translation.translate_tag_definitions sigm.A.tag_definitions) begin
          fun () -> runND_proxy driver_action dr_st
        end in
        match execs with
          | [(ND.Active dres, _, _ )] ->
              Eff.return dres.Driver.dres_core_value
          | [(ND.Killed _ (ND.Undef ub_loc [ub]), _, _)] ->
              Eff.fail (ub_loc, Errors.DESUGAR (Errors.Desugar_UndefinedBehaviour ub))
          | [(ND.Killed _ (ND.Error loc "ยง6.6#4 failed"), _, _)] ->
              Eff.fail (loc, Errors.DESUGAR (Errors.Desugar_ConstraintViolation Constraint.IntegerConstantOutRange))
          | _ ->
              error "TODO error: the driver found less/more than one active execution"
        end
  end


val evalIntegerConstantExpression:
  Loc.t -> (map string Symbol.sym) * C.fun_map unit * C.impl -> A.sigma unit ->
  maybe Ctype.ctype -> A.expression unit -> Eff.exceptM integer Errors.error

let evalIntegerConstantExpression loc core_env sigm ty_opt expr =
  let typing_guard gtc =
    let do_fail =
      Eff.fail (loc, Errors.DESUGAR (Errors.Desugar_UndefinedBehaviour Undefined.UB055_invalid_integer_constant_expression))
    in match gtc with
      | GenTypes.GenLValueType _ _ _ ->
          do_fail
      | GenTypes.GenRValueType gty ->
          (* TODO: check ty_opt and gty ? *)
          if GenTypesAux.is_integer gty then
            Eff.return ()
          else
            do_fail
    end in
  
  evalConstantExpressionAux loc core_env sigm typing_guard ty_opt expr >>= function
    | C.Vloaded (C.LVspecified (C.OVinteger ival)) ->
        match Mem.eval_integer_value ival with
          | Just n ->
              Eff.return n
          | Nothing ->
              error "TODO error: the memory model failed to concretise the integer value (was impl dependent?)"
        end
    | cval ->
        let () = Debug.print_debug 1 [] (fun () ->
          "cval: " ^ Pp.stringFromCore_value cval
        ) in
        (* given that typing guard has passed the evaluator must evaluate to an integer value *)
        error (Loc.stringFromLocation loc ^ ", Mini_pipeline.evalIntegerConstantExpression")
  end


val typecheckAil: A.sigma unit -> A.gamma -> A.expression unit -> either (Loc.t * TypingError.typing_error) Ctype.ctype
let typecheckAil sigm gamm expr =
  match ErrorMonad.runErrorMonad (GenTyping.annotate_expression (GenTyping.annotate_block Nothing) sigm gamm (*TODO: check*)GenTyping.CTXother expr) with
    | Left z ->
        Left z
    | Right a_expr ->
        Right (Translation_aux.ctype_of a_expr)
  end

val in_range_of_signed_int: integer -> maybe bool
let in_range_of_signed_int n =
  match ( Mem.eval_integer_value (Mem.min_ival (Ctype.Signed Ctype.Int_))
        , Mem.eval_integer_value (Mem.max_ival (Ctype.Signed Ctype.Int_)) ) with
    | (Just min, Just max) ->
        Just (min <= n && n <= max)
    | (Just min, Nothing) ->
        if n < min then Just false else Nothing
    | (Nothing, Just max) ->
        if max < n then Just false else Nothing
    | (Nothing, Nothing) ->
        Nothing
  end
