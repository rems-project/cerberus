open import Pervasives
import Symbol Ctype

(* for desugaring *)
type cn_c_kind =
  | C_kind_var
  | C_kind_enum

type cn_var_kind =
  | Var_kind_c of cn_c_kind
  | Var_kind_cn

let ensure_not_c_variable = function
  | (sym, Var_kind_cn) -> sym
  | (sym, Var_kind_c _) -> Assert_extra.failwith "unexpected c variable"
end


type sign = 
  | CN_unsigned
  | CN_signed

type cn_base_type 'a =
  | CN_unit
  | CN_bool
  | CN_integer
  | CN_bits of sign * int
  | CN_real
  | CN_loc
  | CN_alloc_id
  | CN_struct of 'a
  | CN_record of list (Symbol.identifier * cn_base_type 'a)
  | CN_datatype of 'a
  | CN_map of cn_base_type 'a * cn_base_type 'a
  | CN_list of cn_base_type 'a
  | CN_tuple of list (cn_base_type 'a)
  | CN_set of cn_base_type 'a
  | CN_user_type_name of 'a
  | CN_c_typedef_name of 'a



type cn_binop =
  | CN_add
  | CN_sub
  | CN_mul
  | CN_div
  | CN_equal
  | CN_inequal
  | CN_lt
  | CN_le
  | CN_gt
  | CN_ge
  | CN_or
  | CN_and
  | CN_implies
  | CN_map_get


(*
  | Exponentiation of term * term
  | Remainder of term * term
  | FlipBit of {bit : term; t : term}
  | ITE of term * term * term
  | Not of term
  | IntegerToPointerCast of term
  | PointerToIntegerCast of term
*)


type cn_const =
  | CNConst_NULL
  | CNConst_integer of integer
  | CNConst_bits of (sign * int) * integer
  | CNConst_bool of bool
  | CNConst_unit




type cn_pat 'a = CNPat of Loc.t * cn_pat_ 'a

and cn_pat_ 'a = 
  | CNPat_sym of 'a
  | CNPat_wild 
  | CNPat_constructor of 'a * list (Symbol.identifier * cn_pat 'a)
  


type cn_expr_ 'a 'ty =
  | CNExpr_const of cn_const
  | CNExpr_var of 'a
  | CNExpr_list of list (cn_expr 'a 'ty)
  | CNExpr_memberof of cn_expr 'a 'ty * Symbol.identifier
  | CNExpr_record of list (Symbol.identifier * cn_expr 'a 'ty)
  | CNExpr_memberupdates of cn_expr 'a 'ty * list (Symbol.identifier * cn_expr 'a 'ty)
  | CNExpr_arrayindexupdates of cn_expr 'a 'ty * list (cn_expr 'a 'ty * cn_expr 'a 'ty)
  | CNExpr_binop of cn_binop * cn_expr 'a 'ty * cn_expr 'a 'ty
  | CNExpr_sizeof of 'ty
  | CNExpr_offsetof of 'a * Symbol.identifier
  | CNExpr_membershift of cn_expr 'a 'ty * maybe 'a * Symbol.identifier
  | CNExpr_addr of 'a
  | CNExpr_cast of cn_base_type 'a * cn_expr 'a 'ty
  | CNExpr_array_shift of cn_expr 'a 'ty * maybe 'ty * cn_expr 'a 'ty
  | CNExpr_call of 'a * list (cn_expr 'a 'ty)
  | CNExpr_cons of 'a * list (Symbol.identifier * cn_expr 'a 'ty)
  | CNExpr_each of 'a * cn_base_type 'a * (integer * integer) * cn_expr 'a 'ty
  | CNExpr_let of 'a * cn_expr 'a 'ty * cn_expr 'a 'ty
  | CNExpr_match of cn_expr 'a 'ty * list (cn_pat 'a * cn_expr 'a 'ty)
  | CNExpr_ite of cn_expr 'a 'ty * cn_expr 'a 'ty * cn_expr 'a 'ty
  | CNExpr_good of 'ty * cn_expr 'a 'ty
  | CNExpr_deref of cn_expr 'a 'ty
  | CNExpr_value_of_c_atom of 'a * cn_c_kind
  | CNExpr_unchanged of cn_expr 'a 'ty
  | CNExpr_at_env of cn_expr 'a 'ty * string
  | CNExpr_not of cn_expr 'a 'ty
  | CNExpr_negate of cn_expr 'a 'ty
  | CNExpr_default of cn_base_type 'a

and cn_expr 'a 'ty =
  | CNExpr of Loc.t * cn_expr_ 'a 'ty

let mk_bool b = CNExpr Loc.unknown (CNExpr_const (CNConst_bool b))



type cn_pred 'a 'ty =
  | CN_owned of maybe 'ty
  | CN_block of 'ty
  | CN_named of 'a

type cn_resource 'a 'ty =
  | CN_pred of Loc.t * cn_pred 'a 'ty * list (cn_expr 'a 'ty)
  | CN_each of 'a * cn_base_type 'a * cn_expr 'a 'ty * Loc.t * cn_pred 'a 'ty * list (cn_expr 'a 'ty)

type cn_assertion 'a 'ty =
  | CN_assert_exp of cn_expr 'a 'ty
  | CN_assert_qexp of 'a * cn_base_type 'a * cn_expr 'a 'ty * cn_expr 'a 'ty



type cn_clause 'a 'ty =
  | CN_letResource of Loc.t * 'a * cn_resource 'a 'ty * cn_clause 'a 'ty
  | CN_letExpr of Loc.t * 'a * cn_expr 'a 'ty * cn_clause 'a 'ty
  | CN_assert of Loc.t * cn_assertion 'a 'ty * cn_clause 'a 'ty
  | CN_return of Loc.t * cn_expr 'a 'ty

type cn_clauses 'a 'ty =
  | CN_clause of Loc.t * cn_clause 'a 'ty
  | CN_if of Loc.t * cn_expr 'a 'ty * cn_clause 'a 'ty * cn_clauses 'a 'ty

type cn_function 'a 'ty = <|
  cn_func_magic_loc: Loc.t;
  cn_func_loc: Loc.t;
  cn_func_name: 'a;
  cn_func_attrs: list Symbol.identifier;
  cn_func_args: list ('a * cn_base_type 'a);
  cn_func_body: maybe (cn_expr 'a 'ty);
  cn_func_return_bty: cn_base_type 'a;
|>

type cn_condition 'a 'ty =
  | CN_cletResource of Loc.t * 'a * cn_resource 'a 'ty
  | CN_cletExpr of Loc.t * 'a * cn_expr 'a 'ty
  | CN_cconstr of Loc.t * cn_assertion 'a 'ty

type cn_lemma 'a 'ty = <|
  cn_lemma_magic_loc: Loc.t;
  cn_lemma_loc: Loc.t;
  cn_lemma_name: 'a;
  cn_lemma_args: list ('a * cn_base_type 'a);
  cn_lemma_requires: list (cn_condition 'a 'ty);
  cn_lemma_ensures: list (cn_condition 'a 'ty);
|>

type cn_fun_spec 'a 'ty = <|
  cn_spec_magic_loc: Loc.t;
  cn_spec_loc: Loc.t;
  cn_spec_name: 'a;
  cn_spec_args: list ('a * cn_base_type 'a);
  cn_spec_requires: list (cn_condition 'a 'ty);
  cn_spec_ret_name: 'a;
  cn_spec_ensures: list (cn_condition 'a 'ty);
|>


type cn_predicate 'a 'ty = <|
  cn_pred_magic_loc: Loc.t;
  cn_pred_loc: Loc.t;
  cn_pred_name: 'a;
  cn_pred_attrs: list Symbol.identifier;
  cn_pred_output: Loc.t * cn_base_type 'a;
  cn_pred_iargs: list ('a * cn_base_type 'a);
  cn_pred_clauses: maybe (cn_clauses 'a 'ty);
|>

type cn_datatype 'a = <|
  cn_dt_magic_loc: Loc.t;
  cn_dt_loc: Loc.t;
  cn_dt_name: 'a;
  cn_dt_cases: list ('a * list (Symbol.identifier * cn_base_type 'a));
|>

type cn_type_synonym 'a = <|
  cn_tysyn_magic_loc: Loc.t;
  cn_tysyn_loc: Loc.t;
  cn_tysyn_name: 'a;
  cn_tysyn_rhs: cn_base_type 'a;
|>





type cn_function_spec 'a 'ty =
  | CN_accesses of Loc.t * list Symbol.identifier
  | CN_requires of Loc.t * list (cn_condition 'a 'ty)
  | CN_ensures of Loc.t * list (cn_condition 'a 'ty)
  | CN_trusted of Loc.t
  | CN_mk_function of Loc.t * 'a

type cn_loop_spec 'a 'ty =
  | CN_inv of Loc.t * list (cn_condition 'a 'ty)

type pack_unpack =
  | Pack
  | Unpack


type cn_to_instantiate 'a 'ty = 
  | I_Function of 'a
  | I_Good of 'ty
  | I_Everything

type cn_to_extract 'a 'ty =
  | E_Pred of cn_pred 'a 'ty
  | E_Everything

type cn_statement_ 'a 'ty =
  | CN_pack_unpack of pack_unpack * cn_pred 'a 'ty * list (cn_expr 'a 'ty)
  | CN_have of cn_assertion 'a 'ty
  | CN_instantiate of cn_to_instantiate 'a 'ty * (cn_expr 'a 'ty)
  | CN_split_case of cn_assertion 'a 'ty
  | CN_extract of list Symbol.identifier * cn_to_extract 'a 'ty * (cn_expr 'a 'ty)
  | CN_unfold of 'a * list (cn_expr 'a 'ty)
  | CN_assert_stmt of cn_assertion 'a 'ty
  | CN_apply of 'a * list (cn_expr 'a 'ty)
  | CN_inline of (list 'a)
  | CN_print of (cn_expr 'a 'ty)

type cn_statement 'a 'ty =
  CN_statement of Loc.t * cn_statement_ 'a 'ty




type cn_namespace =
  | CN_predicate
  | CN_function
  | CN_lemma
  | CN_fun_spec
  | CN_datatype_nm
  | CN_constructor
  | CN_vars
  | CN_oarg
  | CN_type_nm

instance (Show cn_namespace)
  let show ns =
    match ns with
      | CN_predicate -> "predicate"
      | CN_function -> "function"
      | CN_lemma -> "lemma"
      | CN_fun_spec -> "fun_spec"
      | CN_datatype_nm -> "datatype"
      | CN_constructor -> "constructor"
      | CN_vars -> "vars"
      | CN_oarg -> "oarg"
      | CN_type_nm -> "type name"
    end
end

type cn_error =
  | CNErr_uppercase_function of Symbol.identifier
  | CNErr_lowercase_predicate of Symbol.identifier
  | CNErr_redeclaration of cn_namespace
  | CNErr_unknown_predicate
  | CNErr_invalid_tag
  | CNErr_unknown_identifier of cn_namespace * Symbol.identifier
  | CNErr_unknown_c_identifier of Symbol.identifier
  | CNErr_missing_oarg of Symbol.sym
  | CNErr_general of string
  | CNErr_duplicate_field of Symbol.identifier

type cn_typing_error =
  | CNErr_typing_TODO
