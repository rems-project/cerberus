open import Pervasives
open import Utils Cabs

import AilSyntax AilTypesAux Ctype Annot

module A = AilSyntax


type tag_definition =
  | Struct_definition of Loc.t * Annot.attributes * bool(* isAnonymous*) * list (Symbol.identifier * (Annot.attributes * maybe Ctype.alignment * Ctype.qualifiers * Ctype.ctype)) * maybe Ctype.flexible_array_member
  | Union_definition of Loc.t * Annot.attributes * bool(* isAnonymous*) * list (Symbol.identifier * (Annot.attributes * maybe Ctype.alignment * Ctype.qualifiers * Ctype.ctype))
  | Enum_definition of list integer


(* STD ยง6.2.2#1 *)
type linkage =
  | Linkage_external
  | Linkage_internal
  | Linkage_none

instance (Eq linkage)
  let (=)  = unsafe_structural_equality
  let (<>) = unsafe_structural_inequality
end

instance (Show linkage)
  let show = function
    | Linkage_external ->
        "external"
    | Linkage_internal ->
        "internal"
    | Linkage_none ->
        "none"
  end
end

instance (SetType linkage)
  let setElemCompare = defaultCompare
end

val specifiers_of_external_declaration: external_declaration -> maybe specifiers
let specifiers_of_external_declaration = function
  | EDecl_func (FunDef _ _ specifs _ _) ->
      Just specifs
  | EDecl_decl (Declaration_base _ specifs _) ->
      Just specifs
  | EDecl_decl (Declaration_static_assert _) ->
      Nothing
  | EDecl_magic _ ->
      Nothing
  | EDecl_predCN _ ->
      Nothing
  | EDecl_funcCN _ ->
      Nothing
  | EDecl_lemmaCN _ ->
      Nothing
  | EDecl_fun_specCN _ ->
      Nothing
  | EDecl_datatypeCN _ ->
      Nothing
  | EDecl_type_synCN _ ->
      Nothing
end


val determinate_storage_duration: linkage -> list storage_class_specifier -> A.storageDuration
let determinate_storage_duration link scs =
  if not (List.elem SC_Thread_local scs) &&
     (link = Linkage_external || link = Linkage_internal ||
      List.elem SC_static scs) then
(* STD ยง6.2.4#3, sentence 1 *)
    A.Static
  
  else if List.elem SC_Thread_local scs then
(* STD ยง6.2.4#4, sentence 1 *)
    A.Thread
  
  else if link = Linkage_none && not (List.elem SC_static scs) then
(* STD ยง6.2.4#5, sentence 1 *)
    A.Automatic
  
  else
    error "determinate_storage_duration"


let string_of_storageDuration = function
  | A.Static ->
      "static"
  | A.Thread ->
      "thread"
  | A.Automatic ->
      "automatic"
end

val desug_get_structDefs: map Symbol.sym tag_definition -> Symbol.sym -> Annot.attributes * bool * list (Symbol.identifier * (Annot.attributes * maybe Ctype.alignment * Ctype.qualifiers * Ctype.ctype)) * maybe Ctype.flexible_array_member
let desug_get_structDefs tagDefs tag_sym =
  match Map.lookup tag_sym tagDefs with
    | Just (Struct_definition _ annots isAnonymous xs flex_opt) ->
        (annots, isAnonymous, xs, flex_opt)
    | Just _ ->
        error ("Cabs_to_ail_aux.desug_get_structDefs (" ^ show tag_sym ^
               "): found a union definition instead of a struct")
    | Nothing ->
        error ("Cabs_to_ail_aux.desug_get_structDefs (" ^ show tag_sym ^
               "): couldn't find a struct/union definition")
  end

let inline get_structDefs = desug_get_structDefs


val mk_zeroInit: map A.ail_identifier tag_definition -> Ctype.ctype -> A.expression unit
let rec mk_zeroInit_aux tagDefs (Ctype.Ctype _ ty) =
  match ty with
    | Ctype.Void ->
        error "[Cabs_to_ail.mk_zeroInit_aux] - internal ERROR: Void"
    | Ctype.Basic (Ctype.Integer _) ->
        A.ConstantInteger (A.IConstant 0 A.Octal Nothing)
    | Ctype.Basic (Ctype.Floating _) ->
        A.ConstantFloating ("0.0", Nothing)
    | Ctype.Array elem_ty Nothing ->
        error "[Cabs_to_ail.mk_zeroInit_aux] - internal ERROR: Array Nothing"
    | Ctype.Array elem_ty (Just n) ->
        A.ConstantArray elem_ty begin
          List.replicate (natFromInteger n) (mk_zeroInit_aux tagDefs elem_ty)
        end
    | Ctype.Function _ _ _ ->
        error "[Cabs_to_ail.mk_zeroInit_aux] - internal ERROR: Function"
    | Ctype.FunctionNoParams _ ->
        error "[Cabs_to_ail.mk_zeroInit_aux] - internal ERROR: FunctionNoParams"
    | Ctype.Pointer _ _ ->
        A.ConstantNull
    | Ctype.Atomic atom_ty ->
        (* TODO: check *)
        mk_zeroInit_aux tagDefs atom_ty
    | Ctype.Struct tag_sym ->
        A.ConstantStruct tag_sym
          match Map.lookup tag_sym tagDefs with
            | Just (Struct_definition _ _ _ xs _) ->
                (* NOTE: the potential flexible array member is NOT initialised
                         (there won't even be space allocated for it) *)
                List.map (fun (memb_ident, (_, _, _, memb_ty)) ->
                  (memb_ident, mk_zeroInit_aux tagDefs memb_ty)
                ) xs
            | _ ->
                error "[Cabs_to_ail.mk_zeroInit_aux] - internal ERROR: Struct"
          end
    | Ctype.Union tag_sym ->
        match Map.lookup tag_sym tagDefs with
          | Just (Union_definition _ _ _ ((memb_ident, (_, _, _, memb_ty)) :: _)) ->
              A.ConstantUnion tag_sym memb_ident (mk_zeroInit_aux tagDefs memb_ty)
          | _ ->
              error "[Cabs_to_ail.mk_zeroInit_aux] - internal ERROR: Union"
        end
    | Ctype.Byte ->
        A.ConstantInteger (A.IConstant 0 A.Octal Nothing)
  end
let mk_zeroInit tagDefs ty =
  A.AnnotatedExpression () [] Loc.unknown
    (A.AilEconst (mk_zeroInit_aux tagDefs ty))

open AilSyntax
val zeroAil: expression unit
let zeroAil =
  AnnotatedExpression () [] Loc.unknown
    (AilEconst (ConstantInteger (IConstant 0 Octal Nothing)))

val oneAil: expression unit
let oneAil =
  AnnotatedExpression () [] Loc.unknown
    (AilEconst (ConstantInteger (IConstant 1 Decimal Nothing)))


val     wrap_atomic: Ctype.ctype -> Ctype.ctype
let rec wrap_atomic (Ctype.Ctype annots ty_ as ty) =
  match ty_ with
    | Ctype.Function (ret_qs, ret_ty) params is_variadic ->
        Ctype.Ctype annots (Ctype.Function (ret_qs, Ctype.Ctype [] (Ctype.Atomic ret_ty)) params is_variadic)
    | Ctype.FunctionNoParams (ret_qs, ret_ty) ->
        Ctype.Ctype annots (Ctype.FunctionNoParams (ret_qs, Ctype.Ctype [] (Ctype.Atomic ret_ty)))
    | Ctype.Pointer ref_qs ref_ty ->
        Ctype.Ctype annots (Ctype.Pointer ref_qs (wrap_atomic ref_ty))
    | Ctype.Atomic _ ->
        ty
    | _ ->
        Ctype.Ctype [] (Ctype.Atomic ty)
  end

type fun_declaration =
  ((Ctype.qualifiers * Ctype.ctype) * maybe (list (Ctype.qualifiers * Ctype.ctype * bool)) * bool * bool * bool)

val make_composite_fdecl: fun_declaration -> fun_declaration -> maybe fun_declaration
let make_composite_fdecl fdecl1 fdecl2 =
  let ((ret_qs1, ret_ty1), params_opt1, is_variadic1, is_inline1, is_Noreturn1) = fdecl1 in
  let ((ret_qs2, ret_ty2), params_opt2, is_variadic2, is_inline2, is_Noreturn2) = fdecl2 in
  if not (AilTypesAux.are_compatible (ret_qs1, ret_ty1) (ret_qs1, ret_ty2)) then
    Nothing
  else if is_variadic1 <> is_variadic2 then
    Nothing
  else match AilTypesAux.make_composite ret_ty1 ret_ty2 with
    | Nothing ->
        Nothing
    | Just ret_ty' ->
        let mk_composite z =
          (* NOTE: from the compatility check we know that ret_qs1 = ret_qs2 *)
          Just ((ret_qs1, ret_ty'), z, is_variadic1, is_inline1 || is_inline2, is_Noreturn1 || is_Noreturn2) in
        match (params_opt1, params_opt2) with
          | (Just params1, Just params2) ->
              match (AilTypesAux.make_composite_params params1 params2) with
                | Just params ->
                    mk_composite (Just params)
                | _ ->
                    Nothing
              end
          | (Nothing, Just params) ->
              mk_composite (Just params)
          | (Just params, Nothing) ->
              mk_composite (Just params)
          | (Nothing, Nothing) ->
              mk_composite Nothing
        end
  end

val export_ctype: Ctype.ctype -> Ctype.ctype
let rec export_ctype (Ctype.Ctype annot ty_ as ty) =
  match ty_ with
    | Ctype.Void ->
        ty
    | Ctype.Basic _ ->
        ty
    | Ctype.Array elem_ty n_opt ->
        Ctype.Ctype annot (Ctype.Array (export_ctype elem_ty) n_opt)
    | Ctype.Function (ret_qs, ret_ty) params is_variadic ->
      Ctype.Ctype annot begin
          Ctype.Function (ret_qs, export_ctype ret_ty)
            (List.map (fun (qs, ty, is_register) -> (qs, export_ctype ty, is_register)) params)
            is_variadic
        end
    | Ctype.FunctionNoParams _ ->
        error "TODO: Cabs_to_ail_aux.export_ctype ==> FunctionNoParams"
    (* | Ctype.FunctionDesug has_proto (ret_qs, ret_ty) Nothing is_variadic ->
        Ctype.Ctype annot begin
          Ctype.Function has_proto (ret_qs, export_ctype ret_ty) [] is_variadic
          end
    | Ctype.FunctionDesug has_proto (ret_qs, ret_ty) (Just params) is_variadic ->
      Ctype.Ctype annot begin
        Ctype.Function has_proto (ret_qs, export_ctype ret_ty)
            (List.map (fun (qs, ty, is_register) -> (qs, export_ctype ty, is_register)) params)
            is_variadic
        end *)
    | Ctype.Pointer qs ref_ty ->
      Ctype.Ctype annot (Ctype.Pointer qs (export_ctype ref_ty))
    | Ctype.Atomic atom_ty ->
      Ctype.Ctype annot (Ctype.Atomic atom_ty)
    | Ctype.Struct _ ->
        ty
    | Ctype.Union _ ->
        ty
    | Ctype.Byte ->
        ty
  end

val     has_continue: cabs_statement -> bool
let rec has_continue (CabsStatement _ _ stmt_) =
  match stmt_ with
    | CabsSlabel _ s ->
        has_continue s
    | CabsScase _ s ->
        has_continue s
    | CabsSdefault s ->
        has_continue s
    | CabsSblock ss ->
        List.any has_continue ss
    | CabsSdecl _ ->
        false
    | CabsSnull ->
        false
    | CabsSexpr _ ->
        false
    | CabsSif _ s1 Nothing ->
        has_continue s1
    | CabsSif _ s1 (Just s2) ->
        has_continue s1 || has_continue s2
    | CabsSswitch _ s ->
        has_continue s
    | CabsSwhile _ s ->
        has_continue s
    | CabsSdo _ s ->
        has_continue s
    | CabsSfor _ _ _ s ->
        has_continue s
    | CabsSgoto _ ->
        false
    | CabsScontinue ->
        true
    | CabsSbreak ->
        false
    | CabsSreturn _ ->
        false
    | CabsSpar ss ->
        List.any has_continue ss
    | CabsSasm _ _ _ ->
        false
    | CabsScaseGNU _ _ s ->
        has_continue s
    | CabsSmarker s ->
        has_continue s
  end



