open import Pervasives
import Map_extra

open import Utils Exception Core Errors

import Core_typing_effect
module E = Core_typing_effect

let inline (>>=)      = E.bind
let inline (>>) m1 m2 = m1 >>= fun _ -> m2
let inline (<$>)      = E.fmap
let inline (<*>)      = E.app


type typing_decl =
  | TDsym  of core_base_type
  | TDfun  of core_base_type * list core_base_type
  | TDproc of core_base_type * list core_base_type


type typing_env = <|
  decls: map name typing_decl; (* (either core_base_type (core_base_type * list core_base_type)) *)
  labs: map Symbol.sym (core_base_type * list core_base_type)
|>

val empty_env: typing_env
let empty_env =
  <| decls= Map.empty; labs= Map.empty |>

let singleton_tdecl_env nm tdecl =
  <| decls= Map.singleton nm tdecl; labs= Map.empty |>

let env_union env1 env2 =
  <| decls= Map.(union) env1.decls env2.decls; labs= Map.(union) env1.labs env2.labs |>

let env_unions envs =
  List.foldl env_union empty_env envs

let insert_tdecl nm decl env =
  <| env with decls= Map.insert nm decl env.decls |>


type inferred =
  | InferredUnknown
  | InferredType_unit
  | InferredType_boolean
  | InferredType_ctype
  | InferredType_list of inferred
  | InferredType_tuple of list inferred
  | InferredType_object of core_object_type
  | InferredType_loaded of core_object_type
  | InferredType_storable

val     equalInferred: inferred -> inferred -> bool
let rec equalInferred infer1 infer2 =
  match (infer1, infer2) with
    | (InferredUnknown, _) ->
        false
    | (_, InferredUnknown) ->
        false
    | (InferredType_unit, InferredType_unit) ->
        true
    | (InferredType_boolean, InferredType_boolean) ->
        true
    | (InferredType_ctype, InferredType_ctype) ->
        true
    | (InferredType_list infer1', InferredType_list infer2') ->
        equalInferred infer1' infer2'
    | (InferredType_tuple infers1, InferredType_tuple infers2) ->
        List.all (uncurry equalInferred) (List.zip infers1 infers2)
    | (InferredType_object oTy1, InferredType_object oTy2) ->
        oTy1 = oTy2
    | (InferredType_loaded oTy1, InferredType_loaded oTy2) ->
        oTy1 = oTy2
    | _ ->
        false
  end

instance (Eq inferred)
  let (=) = equalInferred
  let (<>) = curry (not -| uncurry equalInferred)
end

val     toInferred: core_base_type -> inferred
let rec toInferred bTy =
  match bTy with
    | BTy_unit ->
        InferredType_unit
    | BTy_boolean ->
        InferredType_boolean
    | BTy_ctype ->
        InferredType_ctype
    | BTy_list bTy' ->
        InferredType_list (toInferred bTy')
    | BTy_tuple bTys ->
        InferredType_tuple (List.map toInferred bTys)
    | BTy_object oTy ->
        InferredType_object oTy
    | BTy_loaded oTy ->
        InferredType_loaded oTy
    | BTy_storable ->
        InferredType_storable
  end

val     toCoreBaseType: inferred -> maybe core_base_type
let rec toCoreBaseType infer =
  match infer with
    | InferredUnknown ->
        Nothing
    | InferredType_unit ->
        Just BTy_unit
    | InferredType_boolean ->
        Just BTy_boolean
    | InferredType_ctype ->
        Just BTy_ctype
    | InferredType_list infer' ->
        maybe Nothing (Just -| BTy_list) (toCoreBaseType infer')
    | InferredType_tuple infers ->
        (flip Maybe.bind) (Just -| BTy_tuple) $
          List.foldr (fun infer acc_opt  ->
            match acc_opt with
              | Just acc ->
                  Maybe.bind (toCoreBaseType infer) (fun z -> Just (z::acc))
              | Nothing ->
                  Nothing
            end
          ) (Just []) infers
    | InferredType_object oTy ->
        Just (BTy_object oTy)
    | InferredType_loaded oTy ->
        Just (BTy_loaded oTy)
    | InferredType_storable ->
        Just BTy_storable
  end

val is_storable: core_base_type -> bool
let is_storable = function
  | BTy_unit ->
      false
  | BTy_boolean ->
      false
  | BTy_ctype ->
      false
  | BTy_list _ ->
      false
  | BTy_tuple _ ->
      false
  | BTy_object oTy ->
      false (* should this be true? *)
  | BTy_loaded oTy ->
      true
  | BTy_storable ->
      true
end


val is_inferred_storable: inferred -> bool
let is_inferred_storable ity =
  match toCoreBaseType ity with
    | Just bty -> is_storable bty
    | Nothing -> false
  end


type inferred_pattern    = generic_pattern Symbol.sym
type inferred_pexpr      = generic_pexpr   inferred Symbol.sym
type inferred_paction 'a = generic_paction 'a inferred Symbol.sym
type inferred_expr 'a    = generic_expr 'a inferred Symbol.sym


(* TODO: can maybe be removed, doesn't seem to do anything any more *)
let export_ctor loc = function
 | Cnil bty ->
    E.return (Cnil bty)
     (* maybe (E.fail loc (CoreTyping_TODO "export_ctor"))
      *   (E.return -| Cnil) (toCoreBaseType infer) *)
 | Ccons ->
     E.return Ccons
 | Ctuple ->
     E.return Ctuple
 | Carray ->
     E.return Carray
 | Civmax ->
     E.return Civmax
 | Civmin ->
     E.return Civmin
 | Civsizeof ->
     E.return Civsizeof
 | Civalignof ->
     E.return Civalignof
 | CivCOMPL ->
     E.return CivCOMPL
 | CivAND ->
     E.return CivAND
 | CivOR ->
     E.return CivOR
 | CivXOR ->
     E.return CivXOR
 | Cspecified ->
     E.return Cspecified
 | Cunspecified ->
     E.return Cunspecified
 | Cfvfromint ->
     E.return Cfvfromint
 | Civfromfloat ->
     E.return Civfromfloat
 | CivNULLcap is_signed ->
     E.return (CivNULLcap is_signed)
end

val     export_pattern: Loc.t -> inferred_pattern -> E.eff typed_pattern
let rec export_pattern loc (Pattern annots pat) =
  match pat with
   | CaseBase z ->
       E.return (Pattern annots (CaseBase z))
   | CaseCtor ctor pats ->
       (fun c args -> Pattern annots (CaseCtor c args)) <$> export_ctor loc ctor
                                                        <*> E.mapM (export_pattern loc) pats
  end


val     export_pexpr: inferred_pexpr -> E.eff typed_pexpr
let rec export_pexpr (Pexpr annot infer pexpr_) =
  let loc = Annot.get_loc_ annot in
  flip (maybe (E.fail loc TooGeneral))
    (toCoreBaseType infer) $ fun bTy ->
  Pexpr annot bTy <$> match pexpr_ with
    | PEsym sym ->
        E.return (PEsym sym)
    | PEimpl iCst ->
        E.return (PEimpl iCst)
    | PEval cval ->
        E.return (PEval cval)
    | PEconstrained xs ->
        PEconstrained <$> E.mapM (fun (cs, pe) ->
          export_pexpr pe >>= fun pe' ->
          E.return (cs, pe')
        ) xs
    | PEundef loc ub ->
        E.return (PEundef loc ub)
    | PEerror str pe ->
        PEerror str <$> export_pexpr pe
    | PEctor ctor pes ->
        PEctor <$> export_ctor loc ctor
               <*> E.mapM (export_pexpr) pes
    | PEcase pe pat_pes ->
        PEcase <$> export_pexpr pe
               <*> E.mapM (fun (pat, pe) ->
                     export_pattern loc pat >>= fun pat' ->
                     export_pexpr pe    >>= fun pe'  ->
                     E.return (pat', pe')
                   ) pat_pes
    | PEarray_shift pe1 ty pe2 ->
        PEarray_shift <$> export_pexpr pe1
                      <*> E.return ty
                      <*> export_pexpr pe2
    | PEmember_shift pe1 sym member_ident ->
        PEmember_shift <$> export_pexpr pe1
                       <*> E.return sym
                       <*> E.return member_ident
    | PEmemop mop pes ->
      PEmemop mop <$> E.mapM (export_pexpr) pes
    | PEnot pe ->
        PEnot <$> export_pexpr pe
    | PEop binop pe1 pe2 ->
        PEop binop <$> export_pexpr pe1
          <*> export_pexpr pe2
    | PEstruct tag_sym xs ->
        PEstruct tag_sym <$>
          E.mapM (fun (ident, pe) ->
            export_pexpr pe >>= fun pe' ->
            E.return (ident, pe')
          ) xs
    | PEunion sym memb_ident pe ->
        PEunion sym memb_ident <$>
          export_pexpr pe
    | PEcfunction pe ->
        PEcfunction <$> export_pexpr pe
    | PEmemberof tag_sym memb_ident pe ->
        PEmemberof tag_sym memb_ident <$>
          export_pexpr pe
    | PEcall nm pes ->
        PEcall nm <$> E.mapM (export_pexpr) pes
    | PElet pat pe1 pe2 ->
        PElet <$> export_pattern loc pat
              <*> export_pexpr pe1
              <*> export_pexpr pe2
    | PEif pe1 pe2 pe3 ->
        PEif <$> export_pexpr pe1
             <*> export_pexpr pe2
             <*> export_pexpr pe3
    | PEis_scalar pe ->
        PEis_scalar <$> export_pexpr pe
    | PEis_integer pe ->
        PEis_integer <$> export_pexpr pe
    | PEis_signed pe ->
        PEis_signed <$> export_pexpr pe
    | PEis_unsigned pe ->
        PEis_unsigned <$> export_pexpr pe
    | PEbmc_assume pe ->
        PEbmc_assume <$> export_pexpr pe
    | PEare_compatible pe1 pe2 ->
        PEare_compatible <$> export_pexpr pe1 <*> export_pexpr pe2
  end


(* NOTE: not commutative any more *)
val guard_match: Loc.t -> string -> core_base_type -> core_base_type -> E.eff unit
let guard_match loc str bTy1 bTy2 =
  E.guard (if bTy1 = BTy_storable then is_storable bTy2 else bTy1 = bTy2) loc (Mismatch str bTy1 bTy2)


val unify: inferred -> inferred -> maybe (maybe inferred * maybe inferred)
let rec unify infer1 infer2 =
  match (infer1, infer2) with
    | (InferredUnknown, InferredUnknown) ->
        Nothing
    | (_, InferredUnknown) ->
        Just (Nothing, Just infer1)
    | (InferredUnknown, _) ->
        Just (Just infer2, Nothing)
    | (InferredType_list elem_infer1, InferredType_list elem_infer2) ->
        match unify elem_infer1 elem_infer2 with
          | Nothing ->
              Nothing
          | Just (Nothing, Nothing) ->
              Just (Nothing, Nothing)
          | Just (Nothing, Just elem_infer2') ->
              Just (Nothing, Just (InferredType_list elem_infer2'))
          | Just (Just elem_infer1', Nothing) ->
              Just (Just (InferredType_list elem_infer1'), Nothing)
          | Just (Just elem_infer1', Just elem_infer2') ->
              Just (Just (InferredType_list elem_infer1'), Just (InferredType_list elem_infer2'))
        end
    | (InferredType_tuple infers1, InferredType_tuple infers2) ->
        error "TODO: Core_typing_aux.unify tuples"
    | _ ->
        if infer1 = infer2 then
          Just (Nothing, Nothing)
        else
          Nothing
  end

(*
val     inject_inferred: inferred -> inferred_pexpr -> E.eff inferred_pexpr
let rec inject_inferred infer (Pexpr _ pexpr_) =
  match pexpr_ with
    | PEsym _ ->
        
    | PEimpl _ ->
        
    | PEval cval ->
        
(*
    | PEconstrained of list (Mem.mem_iv_constraint  * (generic_pexpr 'bty 'sym)) (* constrained value *)
*)
    | PEundef _ ->
        
    | PEerror _ pe ->
        
    | PEctor of (generic_ctor 'bty) * list (generic_pexpr 'bty 'sym) (* constructor application *)
    | PEcase of (generic_pexpr 'bty 'sym) * list ((generic_pattern 'bty 'sym) * (generic_pexpr 'bty 'sym)) (* pattern matching *)
    | PEarray_shift of (generic_pexpr 'bty 'sym) * ctype * (generic_pexpr 'bty 'sym) (* pointer array shift *)
    | PEmember_shift of (generic_pexpr 'bty 'sym) * Symbol.sym * Cabs.identifier (* pointer struct/union member shift *)
    | PEnot of (generic_pexpr 'bty 'sym) (* boolean not *)
    | PEop of binop * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) (* binary operators *)
    | PEstruct of Symbol.sym * list (Cabs.identifier * (generic_pexpr 'bty 'sym)) (* C struct expression *)
    | PEunion of Symbol.sym * Cabs.identifier * (generic_pexpr 'bty 'sym) (* C union expression *)
    | PEcall of (generic_name 'sym) * list (generic_pexpr 'bty 'sym) (* pure Core function call *)
    | PElet of (generic_pattern 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) (* pure Core let *)
    | PEif of (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) * (generic_pexpr 'bty 'sym) (* pure Core if *)
    | PEis_scalar of (generic_pexpr 'bty 'sym)
    | PEis_integer of (generic_pexpr 'bty 'sym)
    | PEis_signed of (generic_pexpr 'bty 'sym)
    | PEis_unsigned of (generic_pexpr 'bty 'sym)
        
  end
*)
