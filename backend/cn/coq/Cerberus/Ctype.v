(* Generated by Lem from frontend/model/ctype.lem. *)

From Coq Require Import Arith Bool List String.
Require Import Coq.Numbers.BinNums.
Require Import Coq.ZArith.Zcompare.

Require Import Location.
Require Import Symbol.
Require Import Annot.
Require Import IntegerType.

Open Scope nat_scope.
Open Scope string_scope.

(* STD Â§6.2.5#10, sentence 1 *)
Inductive realFloatingType : Type :=
| Float: realFloatingType
| Double: realFloatingType
| LongDouble: realFloatingType .

(* STD Â§6.2.5#11, sentence 2 *)
Inductive floatingType : Type :=
  | RealFloating:  realFloatingType  -> floatingType .


(* STD Â§6.2.5#14, sentence 1 *)
Inductive basicType : Type :=
 | Integer:  integerType  -> basicType
 | Floating:  floatingType  -> basicType .

(* STD Â§6.2.5#26, sentence 1-2 *)
Record qualifiers : Type (*[name = "^\\(\\|\\([a-z A-Z]+_\\)\\)qs[0-9]*'?$"]*) := {
  const    : bool ;
  restrict : bool ;
  volatile : bool
  (* NOTE: the desugaring collapse _Atomic qualifiers and specifiers *)
  }.

Inductive ctype' : Type := (*[name = "^\\([a-z A-Z]*_\\)?ty[0-9]*'?$"]*)
  | Void: ctype'
  | Basic:  basicType  -> ctype'
    (* INVARIANT if the element ctype is an array, the qualifiers must be empty *)
    (* the qualifiers are that of the element type (Â§6.7.3#9) *)
    (* STD Â§6.2.5#20, bullet 1 *)
  | Array:  ctype  ->  (option  nat ) -> ctype'
    (* NOTE: the qualifiers associated to a ctype in the
              list of parameters is that of the parameter lvalue. For example if
              we have a parameter with type "restrict pointer to a const char",
              the qualifiers in the tuple will be:
                {no_qualifiers with restrict=true} *)
    (* STD Â§6.2.5#20, bullet 4 *)
  | Function:  ((qualifiers  * ctype ) % type)
              ->  list  ((qualifiers  * ctype  * (* is_register *)bool ) % type)
              ->  (* is_variadic *)bool  -> ctype'
    (* this version only exists during desugaring (for function declarations) *)
    (* TODO: the previous comment is wrong *)
  | FunctionNoParams:  ((qualifiers  * ctype ) % type) -> ctype'  (* function type with no `prototype' *)

    (* STD Â§6.2.5#20, bullet 5 *)
    (* NOTE: the qualifiers are that of the referenced type *)
  | Pointer:  qualifiers  ->  ctype  -> ctype'
    (* STD Â§6.2.5#20, bullet 6 *)
  | Atomic:  ctype  -> ctype'
  | Struct:  sym  -> ctype'
  | Union:  sym  -> ctype'
with ctype : Type :=
  Ctype:  list  Annot.annot  ->  ctype'  -> ctype .


Definition struct_tag : Type :=  sym.
Definition union_tag : Type :=   sym .
Definition member_id : Type :=   sym .

Inductive flexible_array_member : Type :=
    (* NOTE: the last parameter is the element type of the array *)
  | FlexibleArrayMember:  Annot.attributes  ->  Symbol.identifier  ->  qualifiers  ->  ctype  -> flexible_array_member .

Inductive alignment : Type :=
  | AlignInteger: Z -> alignment
  | AlignType: ctype -> alignment .

Inductive tag_definition : Type :=
  | StructDef:  list  ((Symbol.identifier  * ((Annot.attributes  * option alignment * qualifiers  * ctype ) % type)) % type) ->  option  flexible_array_member   -> tag_definition
  | UnionDef:  list  ((Symbol.identifier  * ((Annot.attributes  * option alignment * qualifiers  * ctype ) % type)) % type) -> tag_definition .

Definition void   : ctype := Ctype nil Void.

Definition char   : ctype :=
  Ctype nil (Basic (Integer Char)).

Definition signed_char   : ctype :=
  Ctype nil (Basic (Integer (Signed Ichar))).

Definition signed_short   : ctype :=
  Ctype nil (Basic (Integer (Signed Short))).

Definition signed_int   : ctype :=
  Ctype nil (Basic (Integer (Signed Int_))).

Definition signed_long   : ctype :=
  Ctype nil (Basic (Integer (Signed Long))).

Definition signed_long_long   : ctype :=
  Ctype nil (Basic (Integer (Signed LongLong))).

Definition intptr_t   : ctype :=
  Ctype nil (Basic (Integer (Signed Intptr_t))).

Definition intmax_t   : ctype :=
  Ctype nil (Basic (Integer (Signed Intmax_t))).
Definition unsigned_char: ctype :=
  Ctype nil (Basic (Integer (Unsigned (Ichar)))).

Definition unsigned_short   : ctype :=
  Ctype nil (Basic (Integer (Unsigned Short))).

Definition unsigned_int   : ctype :=
  Ctype nil (Basic (Integer (Unsigned Int_))).

Definition unsigned_long   : ctype :=
  Ctype nil (Basic (Integer (Unsigned Long))).

Definition unsigned_long_long   : ctype :=
  Ctype nil (Basic (Integer (Unsigned LongLong))).

Definition uintptr_t   : ctype :=
  Ctype nil (Basic (Integer (Unsigned Intptr_t))).

Definition uintmax_t   : ctype :=
  Ctype nil (Basic (Integer (Unsigned Intmax_t))).

Definition char16_t   : ctype :=
  (* STD Â§7.28#2 *)
  Ctype nil (Basic (Integer (Unsigned (Int_leastN_t( 16%nat))))).

Definition char32_t   : ctype :=
  (* STD Â§7.28#2 *)
  Ctype nil (Basic (Integer (Unsigned (Int_leastN_t( 32%nat))))).

Definition wchar_t   : ctype :=
  Ctype nil (Basic (Integer Wchar_t)).

Definition size_t   : ctype :=
  Ctype nil (Basic (Integer Size_t)).

Definition ptrdiff_t   : ctype :=
  Ctype nil (Basic (Integer Ptrdiff_t)).

Definition ptraddr_t  ( _ : unit )  : ctype :=
  Ctype nil (Basic (Integer Ptraddr_t)).

