(* Generated by Lem from frontend/model/symbol.lem. *)

Require Import Coq.ZArith.ZArith.
From Coq Require Import Arith Bool List String.

Require Import Location.

Inductive identifier : Type :=
  | Identifier: Location.t  ->  string  -> identifier .

Definition ident_equal (a b: identifier) : bool :=
  match a, b with
  | Identifier _ s1, Identifier _ s2 => String.eqb s1 s2
  end.

Definition digest := string.

Inductive symbol_description : Type :=
  | SD_None: symbol_description
  | SD_unnamed_tag: Location.t -> symbol_description
  | SD_Id:  string  -> symbol_description
  | SD_CN_Id: string -> symbol_description
  | SD_ObjectAddress:  string  -> symbol_description
  | SD_Return: symbol_description
  | SD_FunArgValue: string -> symbol_description
  | SD_FunArg: Location.t ->  nat  -> symbol_description .

(* Symbolic identifiers *)
Inductive sym : Set :=
  Symbol:  digest  ->  Z  ->  symbol_description  -> sym .

Definition digest_compare (a b: digest): Z
  := match String.compare a b with
     | Eq => 0
     | Lt => -1
     | Gt => 1
     end.

Definition symbolEquality (sym1 sym2: sym): bool :=
  match sym1, sym2 with
  | Symbol d1 n1 _,  Symbol d2 n2 _ =>
      Z.eqb (digest_compare d1 d2) 0 && Z.eqb n1 n2
  end.

(*
(* for [@@deriving eq] *)
Definition equal_sym   : sym  -> sym  -> bool :=  symbolEquality.
(* [?]: removed value specification. *)
*)

Definition symbol_compare (s1 s2 : sym ): comparison :=
  match s1,s2 with
    Symbol d1 n1 _, Symbol d2 n2 _ =>
      let dcmp := digest_compare d1 d2 in
      if Z.eqb dcmp 0 then
        Z.compare n1 n2
      else
        if Z.ltb dcmp 0 then Lt else
          if Z.eqb dcmp 0 then Eq else Gt
  end.

Definition t := sym.

(* Location prefix *)
Inductive prefix : Type :=
  | PrefSource:  Location.t  ->  list  sym  -> prefix
  | PrefFunArg:  Location.t  ->  digest  ->  Z  -> prefix
  | PrefStringLiteral:  Location.t  ->  digest  -> prefix
  | PrefTemporaryLifetime: Location.t -> digest -> prefix
  | PrefCompoundLiteral:  Location.t  ->  digest  -> prefix
  | PrefMalloc: prefix
  | PrefOther:  string  -> prefix .

