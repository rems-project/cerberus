(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Inductive integerBaseType : Set :=
| Ichar : integerBaseType
| Short : integerBaseType
| Int_ : integerBaseType
| Long : integerBaseType
| LongLong : integerBaseType
| IntN_t : int -> integerBaseType
| Int_leastN_t : int -> integerBaseType
| Int_fastN_t : int -> integerBaseType
| Intmax_t : integerBaseType
| Intptr_t : integerBaseType.

Inductive realFloatingType : Set :=
| Float : realFloatingType
| Double : realFloatingType
| LongDouble : realFloatingType.

Inductive floatingType : Set :=
| RealFloating : realFloatingType -> floatingType.

Module qualifiers.
  Record record : Set := Build {
    const : bool;
    restrict : bool;
    volatile : bool }.
  Definition with_const const (r : record) :=
    Build const r.(restrict) r.(volatile).
  Definition with_restrict restrict (r : record) :=
    Build r.(const) restrict r.(volatile).
  Definition with_volatile volatile (r : record) :=
    Build r.(const) r.(restrict) volatile.
End qualifiers.
Definition qualifiers := qualifiers.record.

Definition integerBaseTypeEqual
  (ibty1 : integerBaseType) (ibty2 : integerBaseType) : bool :=
  let ord (function_parameter : integerBaseType) : int :=
    match function_parameter with
    | Ichar => 0
    | Short => 1
    | Int_ => 2
    | Long => 3
    | LongLong => 4
    | IntN_t _ => 5
    | Int_leastN_t _ => 6
    | Int_fastN_t _ => 7
    | Intmax_t => 8
    | Intptr_t => 9
    end in
  match (ibty1, ibty2) with
  | (IntN_t n1, IntN_t n2) => equiv_decb n1 n2
  | (Int_leastN_t n1, Int_leastN_t n2) => equiv_decb n1 n2
  | (Int_fastN_t n1, Int_fastN_t n2) => equiv_decb n1 n2
  | _ => equiv_decb (ord ibty1) (ord ibty2)
  end.

Definition integerTypeEqual {A B : Set} (ity1 : A) (ity2 : B) : bool :=
  let ord {C D : Set} : C -> D :=
    op_startypeminuserrorstar in
  op_startypeminuserrorstar.

Definition basicTypeEqual {A B : Set} (bty1 : A) (bty2 : B) : bool :=
  let ord {C D : Set} : C -> D :=
    op_startypeminuserrorstar in
  op_startypeminuserrorstar.

Definition qualifiersEqual (qs1 : qualifiers) (qs2 : qualifiers) : bool :=
  andb (equiv_decb qs1.(qualifiers.const) qs2.(qualifiers.const))
    (andb (equiv_decb qs1.(qualifiers.restrict) qs2.(qualifiers.restrict))
      (equiv_decb qs1.(qualifiers.volatile) qs2.(qualifiers.volatile))).

Fixpoint ctypeEqual {A B : Set} : A -> B -> bool := op_startypeminuserrorstar.

Definition setElemCompare_integerBaseType
  (ibty1 : integerBaseType) (ibty2 : integerBaseType) : int :=
  let ord (function_parameter : integerBaseType) : int :=
    match function_parameter with
    | Ichar => 0
    | Short => 1
    | Int_ => 2
    | Long => 3
    | LongLong => 4
    | IntN_t _ => 5
    | Int_leastN_t _ => 6
    | Int_fastN_t _ => 7
    | Intmax_t => 8
    | Intptr_t => 9
    end in
  match (ibty1, ibty2) with
  | (IntN_t n1, IntN_t n2) => CoqOfOCaml.Stdlib.compare n1 n2
  | (Int_leastN_t n1, Int_leastN_t n2) => CoqOfOCaml.Stdlib.compare n1 n2
  | (Int_fastN_t n1, Int_fastN_t n2) => CoqOfOCaml.Stdlib.compare n1 n2
  | _ => CoqOfOCaml.Stdlib.compare (ord ibty1) (ord ibty2)
  end.

Definition setElemCompare_integerType {A B : Set} (ity1 : A) (ity2 : B) : int :=
  let ord {C D : Set} : C -> D :=
    op_startypeminuserrorstar in
  op_startypeminuserrorstar.

Definition setElemCompare_basicType {A B : Set} (bty1 : A) (bty2 : B) : int :=
  let ord {C D : Set} : C -> D :=
    op_startypeminuserrorstar in
  op_startypeminuserrorstar.

Definition proj_ctype_ {A B : Set} : A -> B := op_startypeminuserrorstar.

Definition unatomic {A B : Set} : A -> B := op_startypeminuserrorstar.

Definition unatomic_ {A B : Set} (ty : A) : B := op_startypeminuserrorstar.

Definition make_qualifiers (c_value : bool) (r_value : bool) (v_value : bool)
  : qualifiers :=
  {| qualifiers.const := c_value; qualifiers.restrict := r_value;
    qualifiers.volatile := v_value |}.

Definition no_qualifiers : qualifiers :=
  {| qualifiers.const := false; qualifiers.restrict := false;
    qualifiers.volatile := false |}.

Definition combine_qualifiers (qs1 : qualifiers) (qs2 : qualifiers)
  : qualifiers :=
  {| qualifiers.const := orb qs1.(qualifiers.const) qs2.(qualifiers.const);
    qualifiers.restrict :=
      orb qs1.(qualifiers.restrict) qs2.(qualifiers.restrict);
    qualifiers.volatile :=
      orb qs1.(qualifiers.volatile) qs2.(qualifiers.volatile) |}.

Definition mk_ctype_pointer {A B C : Set} (qs : A) (ty : B) : C :=
  op_startypeminuserrorstar.

Definition mk_ctype_integer {A B : Set} (ity : A) : B :=
  op_startypeminuserrorstar.

Definition mk_ctype_atomic {A B : Set} : A -> B := op_startypeminuserrorstar.

Definition vaddr_t {A B : Set} (function_parameter : A) : B :=
  let '_ := function_parameter in
  op_startypeminuserrorstar.

Definition is_ptr_t {A B : Set} : A -> B := op_startypeminuserrorstar.
