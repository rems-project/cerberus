(rule
 (deps extracted/CRelationClasses.mli.patch extracted/patch.sh)
 (package cerberus-cheri)
 (target CRelationClasses.mli)
 (action
  (with-stdout-to %{target} (run %{dep:extracted/patch.sh} %{dep:extracted/CRelationClasses.mli})
)))
(copy_files extracted/CerbSwitches.{ml,mli})
(copy_files extracted/Addr.{ml,mli})
(copy_files extracted/Capabilities.{ml,mli})
(copy_files extracted/Capabilities0.{ml,mli})
(copy_files extracted/CapabilitiesGS.{ml,mli})
(copy_files extracted/CRelationClasses.ml)
(copy_files extracted/Option0.{ml,mli})
(copy_files extracted/base0.{ml,mli})
(copy_files extracted/Numbers0.{ml,mli})
(copy_files extracted/CoqAilSyntax.{ml,mli})
(copy_files extracted/CoqAnnot.{ml,mli})
(copy_files extracted/Applicative.{ml,mli})
(copy_files extracted/Ascii.{ml,mli})
(copy_files extracted/Basics.{ml,mli})
(copy_files extracted/BinaryString.{ml,mli})
(copy_files extracted/BinInt.{ml,mli})
(copy_files extracted/BinList.{ml,mli})
(copy_files extracted/BinNat.{ml,mli})
(copy_files extracted/BinNatDef.{ml,mli})
(copy_files extracted/BinNums.{ml,mli})
(copy_files extracted/BinPos.{ml,mli})
(copy_files extracted/BinPosDef.{ml,mli})
(copy_files extracted/bitvector.{ml,mli})
(copy_files extracted/Bool0.{ml,mli})
(copy_files extracted/Bvector.{ml,mli})
(copy_files extracted/Byte.{ml,mli})
(copy_files extracted/CapFns.{ml,mli})
(copy_files extracted/CapFnsTypes.{ml,mli})
(copy_files extracted/CarryType.{ml,mli})
(copy_files extracted/CheriMorelloMemory.{ml,mli})
(copy_files extracted/ClassicalDedekindReals.{ml,mli})
(copy_files extracted/CMorphisms.{ml,mli})
(copy_files extracted/Compare_dec.{ml,mli})
(copy_files extracted/ConstructiveCauchyAbs.{ml,mli})
(copy_files extracted/ConstructiveCauchyReals.{ml,mli})
(copy_files extracted/ConstructiveCauchyRealsMult.{ml,mli})
(copy_files extracted/ConstructiveEpsilon.{ml,mli})
(copy_files extracted/ConstructiveExtra.{ml,mli})
(copy_files extracted/ConstructiveRcomplete.{ml,mli})
(copy_files extracted/ConstructiveReals.{ml,mli})
(copy_files extracted/CoqCtype.{ml,mli})
(copy_files extracted/countable.{ml,mli})
(copy_files extracted/Datatypes.{ml,mli})
(copy_files extracted/decidable.{ml,mli})
(copy_files extracted/DecidableClass.{ml,mli})
(copy_files extracted/Decimal.{ml,mli})
(copy_files extracted/DepEqNat.{ml,mli})
(copy_files extracted/EitherMonad.{ml,mli})
(copy_files extracted/Eqdep_dec.{ml,mli})
(copy_files extracted/Equalities.{ml,mli})
(copy_files extracted/EquivDec.{ml,mli})
(copy_files extracted/ErrorWithState.{ml,mli})
(copy_files extracted/Fin.{ml,mli})
(copy_files extracted/fin0.{ml,mli})
(copy_files extracted/finite.{ml,mli})
(copy_files extracted/FloatClass.{ml,mli})
(copy_files extracted/FMapAVL0.{ml,mli})
(copy_files extracted/FMapList.{ml,mli})
(copy_files extracted/Functor.{ml,mli})
(copy_files extracted/Hexadecimal.{ml,mli})
(copy_files extracted/HexString.{ml,mli})
(copy_files extracted/CoqImplementation.{ml,mli})
(copy_files extracted/Init.{ml,mli})
(copy_files extracted/Injection.{ml,mli})
(copy_files extracted/Instr_kinds.{ml,mli})
(copy_files extracted/Int0.{ml,mli})
(copy_files extracted/List0.{ml,mli})
(copy_files extracted/List1.{ml,mli})
(copy_files extracted/list2.{ml,mli})
(copy_files extracted/ListSet.{ml,mli})
(copy_files extracted/CoqLocation.{ml,mli})
(copy_files extracted/list_numbers.{ml,mli})
(copy_files extracted/Logic.{ml,mli})
(copy_files extracted/MachineWord.{ml,mli})
(copy_files extracted/Monad0.{ml,mli})
(copy_files extracted/MonadExc.{ml,mli})
(copy_files extracted/MonadFix.{ml,mli})
(copy_files extracted/MonadPlus.{ml,mli})
(copy_files extracted/MonadReader.{ml,mli})
(copy_files extracted/MonadState.{ml,mli})
(copy_files extracted/MonadTrans.{ml,mli})
(copy_files extracted/MonadWriter.{ml,mli})
(copy_files extracted/MonadZero.{ml,mli})
(copy_files extracted/Monoid.{ml,mli})
(copy_files extracted/MorelloCapsGS.{ml,mli})
(copy_files extracted/MorelloTests.{ml,mli})
(copy_files extracted/Nat0.{ml,mli})
(copy_files extracted/NatLib.{ml,mli})
(copy_files extracted/Number.{ml,mli})
(copy_files extracted/numbers0.{ml,mli})
(copy_files extracted/Operators_mwords.{ml,mli})
(copy_files extracted/option0.{ml,mli})
(copy_files extracted/OrderedType0.{ml,mli})
(copy_files extracted/OrderedTypeEx.{ml,mli})
(copy_files extracted/Orders.{ml,mli})
(copy_files extracted/OrdersTac.{ml,mli})
(copy_files extracted/PeanoNat.{ml,mli})
(copy_files extracted/PrimFloat.{ml,mli})
(copy_files extracted/PrimInt63.{ml,mli})
(copy_files extracted/Prompt.{ml,mli})
(copy_files extracted/Prompt_monad.{ml,mli})
(copy_files extracted/Qabs.{ml,mli})
(copy_files extracted/QArith_base.{ml,mli})
(copy_files extracted/Qcanon.{ml,mli})
(copy_files extracted/QExtra.{ml,mli})
(copy_files extracted/Qreduction.{ml,mli})
(copy_files extracted/Qround.{ml,mli})
(copy_files extracted/Relation_Definitions.{ml,mli})
(copy_files extracted/Rdefinitions.{ml,mli})
(copy_files extracted/RelDec.{ml,mli})
(copy_files extracted/Ring_polynom.{ml,mli})
(copy_files extracted/Ring_theory.{ml,mli})
(copy_files extracted/SimpleError.{ml,mli})
(copy_files extracted/ZMap.{ml,mli})
(copy_files extracted/Specif.{ml,mli})
(copy_files extracted/String0.{ml,mli})
(copy_files extracted/String1.{ml,mli})
(copy_files extracted/Sumbool.{ml,mli})
(copy_files extracted/CoqSwitches.{ml,mli})
(copy_files extracted/CoqSymbol.{ml,mli})
(copy_files extracted/CoqTags.{ml,mli})
(copy_files extracted/TypeCasts.{ml,mli})
(copy_files extracted/Traversable.{ml,mli})
(copy_files extracted/CoqUndefined.{ml,mli})
(copy_files extracted/Undefined.{ml,mli})
(copy_files extracted/Utils.{ml,mli})
(copy_files extracted/Utils0.{ml,mli})
(copy_files extracted/Values.{ml,mli})
(copy_files extracted/Vector0.{ml,mli})
(copy_files extracted/vector1.{ml,mli})
(copy_files extracted/VectorDef.{ml,mli})
(copy_files extracted/Wf.{ml,mli})
(copy_files extracted/Word.{ml,mli})
(copy_files extracted/ZArith_dec.{ml,mli})
(copy_files extracted/Zbool.{ml,mli})
(copy_files extracted/Zdigits.{ml,mli})
(copy_files extracted/Zeven.{ml,mli})
 
(library
 (name extracted)
 (public_name cerberus-cheri.coq)
 (modules (:standard \ coqcaptest strfcap))
 (libraries zarith coq-core.kernel)
 (wrapped false)
 (flags (:standard -rectypes -w -27-32-33-39-67-37-20-34))
 (instrumentation (backend landmarks))
)

(library
 (name strfcap)
 (public_name cerberus-cheri.strfcap)
 (modules strfcap)
 (wrapped false)
 (flags (:standard -rectypes -w -27-32-33-39-67-37-20-34))
 (libraries cerberus-cheri.coq)
 (instrumentation (backend landmarks))
)

;; Unit tests for capabilities library
(executable
 (name coqcaptest)
 (modules coqcaptest)
 (flags (:standard -rectypes -w -27-32-33-39-67-37-20-34))
 (libraries str strfcap ounit2 lem)
 (modes byte exe)
 (instrumentation (backend landmarks)))


